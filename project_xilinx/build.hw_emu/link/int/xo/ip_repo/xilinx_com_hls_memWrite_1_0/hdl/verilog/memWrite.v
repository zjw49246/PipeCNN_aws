// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="memWrite_memWrite,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.333000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2581,HLS_SYN_LUT=2663,HLS_VERSION=2020_2}" *)

module memWrite (
        ap_clk,
        ap_rst_n,
        event_done,
        m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY,
        m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY,
        m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST,
        m_axi_gmem0_WID,
        m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST,
        m_axi_gmem0_RID,
        m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID,
        m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP,
        m_axi_gmem0_BID,
        m_axi_gmem0_BUSER,
        conv_in_TDATA,
        conv_in_TVALID,
        conv_in_TREADY,
        conv_in_TKEEP,
        conv_in_TSTRB,
        conv_in_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        event_start,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state82 = 7'd64;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM0_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM0_USER_VALUE = 0;
parameter    C_M_AXI_GMEM0_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   event_done;
output   m_axi_gmem0_AWVALID;
input   m_axi_gmem0_AWREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_AWADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_AWID;
output  [7:0] m_axi_gmem0_AWLEN;
output  [2:0] m_axi_gmem0_AWSIZE;
output  [1:0] m_axi_gmem0_AWBURST;
output  [1:0] m_axi_gmem0_AWLOCK;
output  [3:0] m_axi_gmem0_AWCACHE;
output  [2:0] m_axi_gmem0_AWPROT;
output  [3:0] m_axi_gmem0_AWQOS;
output  [3:0] m_axi_gmem0_AWREGION;
output  [C_M_AXI_GMEM0_AWUSER_WIDTH - 1:0] m_axi_gmem0_AWUSER;
output   m_axi_gmem0_WVALID;
input   m_axi_gmem0_WREADY;
output  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_WDATA;
output  [C_M_AXI_GMEM0_WSTRB_WIDTH - 1:0] m_axi_gmem0_WSTRB;
output   m_axi_gmem0_WLAST;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_WID;
output  [C_M_AXI_GMEM0_WUSER_WIDTH - 1:0] m_axi_gmem0_WUSER;
output   m_axi_gmem0_ARVALID;
input   m_axi_gmem0_ARREADY;
output  [C_M_AXI_GMEM0_ADDR_WIDTH - 1:0] m_axi_gmem0_ARADDR;
output  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_ARID;
output  [7:0] m_axi_gmem0_ARLEN;
output  [2:0] m_axi_gmem0_ARSIZE;
output  [1:0] m_axi_gmem0_ARBURST;
output  [1:0] m_axi_gmem0_ARLOCK;
output  [3:0] m_axi_gmem0_ARCACHE;
output  [2:0] m_axi_gmem0_ARPROT;
output  [3:0] m_axi_gmem0_ARQOS;
output  [3:0] m_axi_gmem0_ARREGION;
output  [C_M_AXI_GMEM0_ARUSER_WIDTH - 1:0] m_axi_gmem0_ARUSER;
input   m_axi_gmem0_RVALID;
output   m_axi_gmem0_RREADY;
input  [C_M_AXI_GMEM0_DATA_WIDTH - 1:0] m_axi_gmem0_RDATA;
input   m_axi_gmem0_RLAST;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_RID;
input  [C_M_AXI_GMEM0_RUSER_WIDTH - 1:0] m_axi_gmem0_RUSER;
input  [1:0] m_axi_gmem0_RRESP;
input   m_axi_gmem0_BVALID;
output   m_axi_gmem0_BREADY;
input  [1:0] m_axi_gmem0_BRESP;
input  [C_M_AXI_GMEM0_ID_WIDTH - 1:0] m_axi_gmem0_BID;
input  [C_M_AXI_GMEM0_BUSER_WIDTH - 1:0] m_axi_gmem0_BUSER;
input  [15:0] conv_in_TDATA;
input   conv_in_TVALID;
output   conv_in_TREADY;
input  [1:0] conv_in_TKEEP;
input  [1:0] conv_in_TSTRB;
input  [0:0] conv_in_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   event_start;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] out_dim1;
wire   [7:0] out_dim2;
wire   [15:0] out_dim3;
wire   [15:0] out_dim1xbatch;
wire   [31:0] out_dim1x2xbatch;
wire   [7:0] batch_indx_dim1;
wire   [7:0] batch_indx_dim2;
wire   [7:0] padd_offset;
wire   [7:0] pool_on;
wire   [7:0] pool_size;
wire   [7:0] pool_stride;
wire   [63:0] top;
reg    gmem0_blk_n_AW;
reg    ap_enable_reg_pp0_iter6;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln159_reg_1103;
reg   [0:0] and_ln159_reg_1103_pp0_iter5_reg;
reg    gmem0_blk_n_W;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] and_ln159_reg_1103_pp0_iter6_reg;
reg    gmem0_blk_n_B;
reg    ap_enable_reg_pp0_iter75;
reg   [0:0] and_ln159_reg_1103_pp0_iter74_reg;
reg    conv_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln96_fu_482_p2;
wire   [0:0] icmp_ln103_fu_491_p2;
reg    gmem0_AWVALID;
wire    gmem0_AWREADY;
reg    gmem0_WVALID;
wire    gmem0_WREADY;
wire    gmem0_ARREADY;
wire    gmem0_RVALID;
wire   [7:0] gmem0_RDATA;
wire    gmem0_RLAST;
wire   [0:0] gmem0_RID;
wire   [0:0] gmem0_RUSER;
wire   [1:0] gmem0_RRESP;
wire    gmem0_BVALID;
reg    gmem0_BREADY;
wire   [1:0] gmem0_BRESP;
wire   [0:0] gmem0_BID;
wire   [0:0] gmem0_BUSER;
reg   [31:0] i_reg_272;
reg   [15:0] lane_num_idx_reg_283;
reg   [15:0] lane_num_idx_reg_283_pp0_iter1_reg;
reg    ap_predicate_op188_read_state6;
reg    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state12_pp0_stage0_iter6;
reg    ap_block_state12_io;
wire    ap_block_state13_pp0_stage0_iter7;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter8;
wire    ap_block_state15_pp0_stage0_iter9;
wire    ap_block_state16_pp0_stage0_iter10;
wire    ap_block_state17_pp0_stage0_iter11;
wire    ap_block_state18_pp0_stage0_iter12;
wire    ap_block_state19_pp0_stage0_iter13;
wire    ap_block_state20_pp0_stage0_iter14;
wire    ap_block_state21_pp0_stage0_iter15;
wire    ap_block_state22_pp0_stage0_iter16;
wire    ap_block_state23_pp0_stage0_iter17;
wire    ap_block_state24_pp0_stage0_iter18;
wire    ap_block_state25_pp0_stage0_iter19;
wire    ap_block_state26_pp0_stage0_iter20;
wire    ap_block_state27_pp0_stage0_iter21;
wire    ap_block_state28_pp0_stage0_iter22;
wire    ap_block_state29_pp0_stage0_iter23;
wire    ap_block_state30_pp0_stage0_iter24;
wire    ap_block_state31_pp0_stage0_iter25;
wire    ap_block_state32_pp0_stage0_iter26;
wire    ap_block_state33_pp0_stage0_iter27;
wire    ap_block_state34_pp0_stage0_iter28;
wire    ap_block_state35_pp0_stage0_iter29;
wire    ap_block_state36_pp0_stage0_iter30;
wire    ap_block_state37_pp0_stage0_iter31;
wire    ap_block_state38_pp0_stage0_iter32;
wire    ap_block_state39_pp0_stage0_iter33;
wire    ap_block_state40_pp0_stage0_iter34;
wire    ap_block_state41_pp0_stage0_iter35;
wire    ap_block_state42_pp0_stage0_iter36;
wire    ap_block_state43_pp0_stage0_iter37;
wire    ap_block_state44_pp0_stage0_iter38;
wire    ap_block_state45_pp0_stage0_iter39;
wire    ap_block_state46_pp0_stage0_iter40;
wire    ap_block_state47_pp0_stage0_iter41;
wire    ap_block_state48_pp0_stage0_iter42;
wire    ap_block_state49_pp0_stage0_iter43;
wire    ap_block_state50_pp0_stage0_iter44;
wire    ap_block_state51_pp0_stage0_iter45;
wire    ap_block_state52_pp0_stage0_iter46;
wire    ap_block_state53_pp0_stage0_iter47;
wire    ap_block_state54_pp0_stage0_iter48;
wire    ap_block_state55_pp0_stage0_iter49;
wire    ap_block_state56_pp0_stage0_iter50;
wire    ap_block_state57_pp0_stage0_iter51;
wire    ap_block_state58_pp0_stage0_iter52;
wire    ap_block_state59_pp0_stage0_iter53;
wire    ap_block_state60_pp0_stage0_iter54;
wire    ap_block_state61_pp0_stage0_iter55;
wire    ap_block_state62_pp0_stage0_iter56;
wire    ap_block_state63_pp0_stage0_iter57;
wire    ap_block_state64_pp0_stage0_iter58;
wire    ap_block_state65_pp0_stage0_iter59;
wire    ap_block_state66_pp0_stage0_iter60;
wire    ap_block_state67_pp0_stage0_iter61;
wire    ap_block_state68_pp0_stage0_iter62;
wire    ap_block_state69_pp0_stage0_iter63;
wire    ap_block_state70_pp0_stage0_iter64;
wire    ap_block_state71_pp0_stage0_iter65;
wire    ap_block_state72_pp0_stage0_iter66;
wire    ap_block_state73_pp0_stage0_iter67;
wire    ap_block_state74_pp0_stage0_iter68;
wire    ap_block_state75_pp0_stage0_iter69;
wire    ap_block_state76_pp0_stage0_iter70;
wire    ap_block_state77_pp0_stage0_iter71;
wire    ap_block_state78_pp0_stage0_iter72;
wire    ap_block_state79_pp0_stage0_iter73;
wire    ap_block_state80_pp0_stage0_iter74;
reg    ap_block_state81_pp0_stage0_iter75;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] lane_item_idx_reg_295;
reg   [7:0] lane_item_idx_reg_295_pp0_iter1_reg;
reg   [7:0] lane_item_idx_reg_295_pp0_iter2_reg;
reg   [7:0] lane_item_idx_reg_295_pp0_iter3_reg;
reg   [15:0] out_idx_y_reg_307;
reg   [15:0] out_idx_x_reg_318;
wire    ap_CS_fsm_state2;
wire   [15:0] out_dim1_cast_fu_338_p1;
reg   [15:0] out_dim1_cast_reg_968;
wire   [15:0] out_dim2_cast_fu_341_p1;
reg   [15:0] out_dim2_cast_reg_973;
reg   [15:0] div_reg_983;
reg   [63:0] top_read_reg_1003;
wire    ap_CS_fsm_state5;
wire   [18:0] out_dim3_cast14_fu_396_p1;
reg   [18:0] out_dim3_cast14_reg_1008;
wire   [18:0] padd_offset_cast12_fu_399_p1;
reg   [18:0] padd_offset_cast12_reg_1013;
wire   [17:0] padd_offset_cast_fu_402_p1;
reg   [17:0] padd_offset_cast_reg_1018;
wire   [0:0] cmp26_fu_405_p2;
reg   [0:0] cmp26_reg_1023;
wire   [16:0] mul33_cast_fu_419_p1;
reg   [16:0] mul33_cast_reg_1027;
wire   [31:0] conv35_fu_423_p1;
reg   [31:0] conv35_reg_1032;
wire   [16:0] mul42_cast_fu_435_p1;
reg   [16:0] mul42_cast_reg_1037;
wire   [16:0] sub107_fu_442_p2;
reg   [16:0] sub107_reg_1042;
wire  signed [16:0] sub111_cast_fu_454_p1;
reg  signed [16:0] sub111_cast_reg_1047;
wire  signed [16:0] sext_ln96_fu_464_p1;
reg  signed [16:0] sext_ln96_reg_1052;
wire   [31:0] grp_fu_919_p2;
reg   [31:0] mul_ln96_1_reg_1057;
wire  signed [30:0] trunc_ln149_fu_468_p1;
reg  signed [30:0] trunc_ln149_reg_1062;
wire  signed [29:0] trunc_ln154_fu_472_p1;
reg  signed [29:0] trunc_ln154_reg_1067;
wire   [31:0] i_1_fu_476_p2;
reg   [0:0] icmp_ln96_reg_1077;
reg   [0:0] icmp_ln96_reg_1077_pp0_iter1_reg;
reg   [0:0] icmp_ln96_reg_1077_pp0_iter2_reg;
reg   [0:0] icmp_ln96_reg_1077_pp0_iter3_reg;
wire   [16:0] add_ln149_1_fu_537_p2;
reg   [16:0] add_ln149_1_reg_1084;
reg   [16:0] add_ln149_1_reg_1084_pp0_iter1_reg;
reg   [16:0] add_ln149_1_reg_1084_pp0_iter2_reg;
reg   [16:0] add_ln149_1_reg_1084_pp0_iter3_reg;
wire   [18:0] sub_ln152_2_fu_564_p2;
reg   [18:0] sub_ln152_2_reg_1090;
wire   [1:0] trunc_ln148_fu_569_p1;
reg   [1:0] trunc_ln148_reg_1097;
reg   [1:0] trunc_ln148_reg_1097_pp0_iter1_reg;
reg   [1:0] trunc_ln148_reg_1097_pp0_iter2_reg;
reg   [1:0] trunc_ln148_reg_1097_pp0_iter3_reg;
wire   [0:0] and_ln159_fu_589_p2;
reg   [0:0] and_ln159_reg_1103_pp0_iter1_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter2_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter3_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter4_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter7_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter8_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter9_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter10_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter11_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter12_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter13_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter14_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter15_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter16_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter17_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter18_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter19_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter20_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter21_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter22_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter23_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter24_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter25_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter26_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter27_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter28_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter29_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter30_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter31_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter32_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter33_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter34_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter35_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter36_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter37_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter38_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter39_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter40_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter41_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter42_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter43_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter44_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter45_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter46_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter47_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter48_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter49_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter50_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter51_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter52_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter53_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter54_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter55_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter56_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter57_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter58_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter59_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter60_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter61_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter62_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter63_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter64_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter65_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter66_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter67_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter68_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter69_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter70_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter71_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter72_reg;
reg   [0:0] and_ln159_reg_1103_pp0_iter73_reg;
wire   [15:0] lane_num_idx_2_fu_654_p3;
reg   [15:0] lane_num_idx_2_reg_1107;
wire   [15:0] out_idx_y_2_fu_676_p3;
wire   [15:0] out_idx_x_2_fu_698_p3;
wire   [7:0] lane_item_idx_2_fu_712_p3;
reg   [7:0] lane_item_idx_2_reg_1122;
wire   [0:0] tmp_1_fu_723_p3;
reg   [0:0] tmp_1_reg_1127;
reg   [0:0] tmp_1_reg_1127_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_1127_pp0_iter3_reg;
wire   [15:0] index_z_group_fu_761_p3;
reg   [15:0] index_z_group_reg_1132;
wire   [7:0] select_ln167_fu_779_p3;
reg   [7:0] select_ln167_reg_1137;
reg   [7:0] select_ln167_reg_1137_pp0_iter2_reg;
reg   [7:0] select_ln167_reg_1137_pp0_iter3_reg;
reg   [7:0] select_ln167_reg_1137_pp0_iter4_reg;
reg   [7:0] select_ln167_reg_1137_pp0_iter5_reg;
reg   [7:0] select_ln167_reg_1137_pp0_iter6_reg;
wire   [29:0] trunc_ln149_1_fu_804_p1;
reg   [29:0] trunc_ln149_1_reg_1152;
wire   [30:0] trunc_ln149_2_fu_807_p1;
reg   [30:0] trunc_ln149_2_reg_1157;
wire   [1:0] sub_ln153_fu_810_p2;
reg   [1:0] sub_ln153_reg_1162;
wire   [29:0] grp_fu_790_p2;
reg   [29:0] mul_ln154_reg_1167;
wire   [30:0] grp_fu_799_p2;
reg   [30:0] mul_ln149_1_reg_1172;
wire   [31:0] top_addr_1_fu_871_p2;
wire   [31:0] top_addr_fu_898_p2;
reg   [63:0] gmem0_addr_reg_1187;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_enable_reg_pp0_iter47;
reg    ap_enable_reg_pp0_iter48;
reg    ap_enable_reg_pp0_iter49;
reg    ap_enable_reg_pp0_iter50;
reg    ap_enable_reg_pp0_iter51;
reg    ap_enable_reg_pp0_iter52;
reg    ap_enable_reg_pp0_iter53;
reg    ap_enable_reg_pp0_iter54;
reg    ap_enable_reg_pp0_iter55;
reg    ap_enable_reg_pp0_iter56;
reg    ap_enable_reg_pp0_iter57;
reg    ap_enable_reg_pp0_iter58;
reg    ap_enable_reg_pp0_iter59;
reg    ap_enable_reg_pp0_iter60;
reg    ap_enable_reg_pp0_iter61;
reg    ap_enable_reg_pp0_iter62;
reg    ap_enable_reg_pp0_iter63;
reg    ap_enable_reg_pp0_iter64;
reg    ap_enable_reg_pp0_iter65;
reg    ap_enable_reg_pp0_iter66;
reg    ap_enable_reg_pp0_iter67;
reg    ap_enable_reg_pp0_iter68;
reg    ap_enable_reg_pp0_iter69;
reg    ap_enable_reg_pp0_iter70;
reg    ap_enable_reg_pp0_iter71;
reg    ap_enable_reg_pp0_iter72;
reg    ap_enable_reg_pp0_iter73;
reg    ap_enable_reg_pp0_iter74;
reg   [15:0] ap_phi_mux_lane_num_idx_phi_fu_287_p4;
reg   [7:0] ap_phi_mux_lane_item_idx_phi_fu_299_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_top_addr_2_reg_329;
reg   [31:0] ap_phi_reg_pp0_iter1_top_addr_2_reg_329;
reg   [31:0] ap_phi_reg_pp0_iter2_top_addr_2_reg_329;
reg   [31:0] ap_phi_reg_pp0_iter3_top_addr_2_reg_329;
reg   [31:0] ap_phi_reg_pp0_iter4_top_addr_2_reg_329;
reg   [31:0] ap_phi_reg_pp0_iter5_top_addr_2_reg_329;
wire   [63:0] add_ln167_fu_908_p2;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] buffer_0_fu_176;
wire   [7:0] output_lane_fu_501_p1;
reg   [7:0] buffer_1_fu_180;
reg    ap_block_state1;
wire   [8:0] mul4_fu_348_p3;
wire   [16:0] mul4_cast_fu_356_p1;
wire   [16:0] out_dim3_cast_fu_344_p1;
wire   [16:0] add_fu_360_p2;
wire   [7:0] mul_ln96_fu_380_p0;
wire   [7:0] mul_ln96_fu_380_p1;
wire   [15:0] mul_ln96_fu_380_p2;
wire   [7:0] mul33_fu_414_p0;
wire   [7:0] mul33_fu_414_p1;
wire   [15:0] mul33_fu_414_p2;
wire   [7:0] mul42_fu_430_p0;
wire   [7:0] mul42_fu_430_p1;
wire   [15:0] mul42_fu_430_p2;
wire   [16:0] div_cast_fu_439_p1;
wire   [8:0] out_dim2_cast10_fu_393_p1;
wire   [8:0] sub111_fu_448_p2;
wire   [8:0] out_dim1_cast11_fu_390_p1;
wire   [8:0] sub115_fu_458_p2;
wire   [16:0] zext_ln149_3_fu_533_p1;
wire   [16:0] shl_ln_fu_542_p3;
wire   [17:0] zext_ln159_1_fu_550_p1;
wire   [17:0] zext_ln103_1_fu_487_p1;
wire   [17:0] add_ln159_fu_554_p2;
wire   [18:0] zext_ln159_2_fu_560_p1;
wire   [0:0] icmp_ln159_1_fu_578_p2;
wire   [0:0] icmp_ln159_fu_573_p2;
wire   [0:0] xor_ln159_fu_583_p2;
wire   [16:0] zext_ln149_fu_525_p1;
wire   [16:0] zext_ln149_1_fu_529_p1;
wire   [0:0] icmp_ln186_fu_595_p2;
wire   [0:0] icmp_ln186_1_fu_600_p2;
wire   [0:0] icmp_ln186_2_fu_605_p2;
wire   [0:0] icmp_ln186_3_fu_610_p2;
wire   [0:0] and_ln186_1_fu_622_p2;
wire   [0:0] and_ln186_fu_616_p2;
wire   [0:0] and_ln191_fu_634_p2;
wire   [15:0] lane_num_idx_1_fu_640_p2;
wire   [0:0] and_ln186_2_fu_628_p2;
wire   [15:0] select_ln188_fu_646_p3;
wire   [15:0] out_idx_y_1_fu_662_p2;
wire   [15:0] select_ln193_fu_668_p3;
wire   [15:0] add_ln199_fu_684_p2;
wire   [15:0] out_idx_x_1_fu_690_p3;
wire   [7:0] lane_item_idx_1_fu_706_p2;
wire   [17:0] trunc_ln152_fu_720_p1;
wire   [17:0] sub_ln152_fu_730_p2;
wire   [15:0] trunc_ln152_2_fu_736_p4;
wire   [15:0] sub_ln152_1_fu_746_p2;
wire   [15:0] trunc_ln152_3_fu_752_p4;
wire   [0:0] trunc_ln167_fu_775_p1;
wire   [15:0] grp_fu_790_p0;
wire   [15:0] grp_fu_799_p0;
wire   [31:0] grp_fu_925_p3;
wire   [7:0] p_and_t_cast_fu_822_p3;
wire   [7:0] sub_ln153_1_fu_829_p2;
wire   [7:0] tmp_4_fu_835_p3;
wire   [7:0] select_ln153_fu_842_p3;
wire   [29:0] zext_ln159_fu_819_p1;
wire   [29:0] tmp6_fu_853_p2;
wire   [29:0] tmp43_fu_858_p2;
wire   [31:0] tmp5_fu_863_p3;
wire   [31:0] zext_ln154_1_fu_849_p1;
wire   [30:0] tmp_fu_877_p2;
wire   [30:0] add_ln149_1_cast18_fu_881_p1;
wire   [30:0] tmp11_fu_884_p2;
wire   [31:0] tmp2_fu_890_p3;
wire   [31:0] zext_ln103_fu_815_p1;
wire   [63:0] zext_ln167_fu_904_p1;
wire   [15:0] grp_fu_919_p0;
wire   [16:0] grp_fu_919_p1;
wire   [15:0] grp_fu_925_p0;
wire   [15:0] grp_fu_925_p1;
wire   [15:0] grp_fu_925_p2;
reg    grp_fu_790_ce;
reg    grp_fu_799_ce;
reg    grp_fu_925_ce;
wire    ap_CS_fsm_state82;
reg   [6:0] ap_NS_fsm;
wire    ap_ext_blocking_cur_n;
wire    ap_str_blocking_cur_n;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_conv_in_V_data_V_U_apdone_blk;
wire   [15:0] conv_in_TDATA_int_regslice;
wire    conv_in_TVALID_int_regslice;
reg    conv_in_TREADY_int_regslice;
wire    regslice_both_conv_in_V_data_V_U_ack_in;
wire    regslice_both_conv_in_V_keep_V_U_apdone_blk;
wire   [1:0] conv_in_TKEEP_int_regslice;
wire    regslice_both_conv_in_V_keep_V_U_vld_out;
wire    regslice_both_conv_in_V_keep_V_U_ack_in;
wire    regslice_both_conv_in_V_strb_V_U_apdone_blk;
wire   [1:0] conv_in_TSTRB_int_regslice;
wire    regslice_both_conv_in_V_strb_V_U_vld_out;
wire    regslice_both_conv_in_V_strb_V_U_ack_in;
wire    regslice_both_conv_in_V_last_V_U_apdone_blk;
wire   [0:0] conv_in_TLAST_int_regslice;
wire    regslice_both_conv_in_V_last_V_U_vld_out;
wire    regslice_both_conv_in_V_last_V_U_ack_in;
wire   [29:0] grp_fu_790_p00;
wire   [30:0] grp_fu_799_p00;
wire   [31:0] grp_fu_919_p00;
wire   [31:0] grp_fu_919_p10;
wire   [15:0] mul33_fu_414_p00;
wire   [15:0] mul42_fu_430_p00;
wire   [15:0] mul_ln96_fu_380_p00;
wire   [15:0] mul_ln96_fu_380_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter75 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter48 = 1'b0;
#0 ap_enable_reg_pp0_iter49 = 1'b0;
#0 ap_enable_reg_pp0_iter50 = 1'b0;
#0 ap_enable_reg_pp0_iter51 = 1'b0;
#0 ap_enable_reg_pp0_iter52 = 1'b0;
#0 ap_enable_reg_pp0_iter53 = 1'b0;
#0 ap_enable_reg_pp0_iter54 = 1'b0;
#0 ap_enable_reg_pp0_iter55 = 1'b0;
#0 ap_enable_reg_pp0_iter56 = 1'b0;
#0 ap_enable_reg_pp0_iter57 = 1'b0;
#0 ap_enable_reg_pp0_iter58 = 1'b0;
#0 ap_enable_reg_pp0_iter59 = 1'b0;
#0 ap_enable_reg_pp0_iter60 = 1'b0;
#0 ap_enable_reg_pp0_iter61 = 1'b0;
#0 ap_enable_reg_pp0_iter62 = 1'b0;
#0 ap_enable_reg_pp0_iter63 = 1'b0;
#0 ap_enable_reg_pp0_iter64 = 1'b0;
#0 ap_enable_reg_pp0_iter65 = 1'b0;
#0 ap_enable_reg_pp0_iter66 = 1'b0;
#0 ap_enable_reg_pp0_iter67 = 1'b0;
#0 ap_enable_reg_pp0_iter68 = 1'b0;
#0 ap_enable_reg_pp0_iter69 = 1'b0;
#0 ap_enable_reg_pp0_iter70 = 1'b0;
#0 ap_enable_reg_pp0_iter71 = 1'b0;
#0 ap_enable_reg_pp0_iter72 = 1'b0;
#0 ap_enable_reg_pp0_iter73 = 1'b0;
#0 ap_enable_reg_pp0_iter74 = 1'b0;
end

memWrite_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .out_dim1(out_dim1),
    .out_dim2(out_dim2),
    .out_dim3(out_dim3),
    .out_dim1xbatch(out_dim1xbatch),
    .out_dim1x2xbatch(out_dim1x2xbatch),
    .batch_indx_dim1(batch_indx_dim1),
    .batch_indx_dim2(batch_indx_dim2),
    .padd_offset(padd_offset),
    .pool_on(pool_on),
    .pool_size(pool_size),
    .pool_stride(pool_stride),
    .top(top),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

memWrite_gmem0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 8 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM0_CACHE_VALUE ))
gmem0_m_axi_U(
    .AWVALID(m_axi_gmem0_AWVALID),
    .AWREADY(m_axi_gmem0_AWREADY),
    .AWADDR(m_axi_gmem0_AWADDR),
    .AWID(m_axi_gmem0_AWID),
    .AWLEN(m_axi_gmem0_AWLEN),
    .AWSIZE(m_axi_gmem0_AWSIZE),
    .AWBURST(m_axi_gmem0_AWBURST),
    .AWLOCK(m_axi_gmem0_AWLOCK),
    .AWCACHE(m_axi_gmem0_AWCACHE),
    .AWPROT(m_axi_gmem0_AWPROT),
    .AWQOS(m_axi_gmem0_AWQOS),
    .AWREGION(m_axi_gmem0_AWREGION),
    .AWUSER(m_axi_gmem0_AWUSER),
    .WVALID(m_axi_gmem0_WVALID),
    .WREADY(m_axi_gmem0_WREADY),
    .WDATA(m_axi_gmem0_WDATA),
    .WSTRB(m_axi_gmem0_WSTRB),
    .WLAST(m_axi_gmem0_WLAST),
    .WID(m_axi_gmem0_WID),
    .WUSER(m_axi_gmem0_WUSER),
    .ARVALID(m_axi_gmem0_ARVALID),
    .ARREADY(m_axi_gmem0_ARREADY),
    .ARADDR(m_axi_gmem0_ARADDR),
    .ARID(m_axi_gmem0_ARID),
    .ARLEN(m_axi_gmem0_ARLEN),
    .ARSIZE(m_axi_gmem0_ARSIZE),
    .ARBURST(m_axi_gmem0_ARBURST),
    .ARLOCK(m_axi_gmem0_ARLOCK),
    .ARCACHE(m_axi_gmem0_ARCACHE),
    .ARPROT(m_axi_gmem0_ARPROT),
    .ARQOS(m_axi_gmem0_ARQOS),
    .ARREGION(m_axi_gmem0_ARREGION),
    .ARUSER(m_axi_gmem0_ARUSER),
    .RVALID(m_axi_gmem0_RVALID),
    .RREADY(m_axi_gmem0_RREADY),
    .RDATA(m_axi_gmem0_RDATA),
    .RLAST(m_axi_gmem0_RLAST),
    .RID(m_axi_gmem0_RID),
    .RUSER(m_axi_gmem0_RUSER),
    .RRESP(m_axi_gmem0_RRESP),
    .BVALID(m_axi_gmem0_BVALID),
    .BREADY(m_axi_gmem0_BREADY),
    .BRESP(m_axi_gmem0_BRESP),
    .BID(m_axi_gmem0_BID),
    .BUSER(m_axi_gmem0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem0_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem0_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem0_RDATA),
    .I_RID(gmem0_RID),
    .I_RUSER(gmem0_RUSER),
    .I_RRESP(gmem0_RRESP),
    .I_RLAST(gmem0_RLAST),
    .I_AWVALID(gmem0_AWVALID),
    .I_AWREADY(gmem0_AWREADY),
    .I_AWADDR(gmem0_addr_reg_1187),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem0_WVALID),
    .I_WREADY(gmem0_WREADY),
    .I_WDATA(select_ln167_reg_1137_pp0_iter6_reg),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'd1),
    .I_BVALID(gmem0_BVALID),
    .I_BREADY(gmem0_BREADY),
    .I_BRESP(gmem0_BRESP),
    .I_BID(gmem0_BID),
    .I_BUSER(gmem0_BUSER)
);

memWrite_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U1(
    .din0(mul_ln96_fu_380_p0),
    .din1(mul_ln96_fu_380_p1),
    .dout(mul_ln96_fu_380_p2)
);

memWrite_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U2(
    .din0(mul33_fu_414_p0),
    .din1(mul33_fu_414_p1),
    .dout(mul33_fu_414_p2)
);

memWrite_mul_8ns_8ns_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8ns_8ns_16_1_1_U3(
    .din0(mul42_fu_430_p0),
    .din1(mul42_fu_430_p1),
    .dout(mul42_fu_430_p2)
);

memWrite_mul_16ns_30s_30_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 30 ),
    .dout_WIDTH( 30 ))
mul_16ns_30s_30_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_790_p0),
    .din1(trunc_ln154_reg_1067),
    .ce(grp_fu_790_ce),
    .dout(grp_fu_790_p2)
);

memWrite_mul_16ns_31s_31_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mul_16ns_31s_31_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_799_p0),
    .din1(trunc_ln149_reg_1062),
    .ce(grp_fu_799_ce),
    .dout(grp_fu_799_p2)
);

memWrite_mul_mul_16ns_17ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 32 ))
mul_mul_16ns_17ns_32_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_919_p0),
    .din1(grp_fu_919_p1),
    .ce(1'b1),
    .dout(grp_fu_919_p2)
);

memWrite_am_addmul_16ns_16ns_16ns_32_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
am_addmul_16ns_16ns_16ns_32_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_925_p0),
    .din1(grp_fu_925_p1),
    .din2(grp_fu_925_p2),
    .ce(grp_fu_925_ce),
    .dout(grp_fu_925_p3)
);

memWrite_regslice_both #(
    .DataWidth( 16 ))
regslice_both_conv_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(conv_in_TDATA),
    .vld_in(conv_in_TVALID),
    .ack_in(regslice_both_conv_in_V_data_V_U_ack_in),
    .data_out(conv_in_TDATA_int_regslice),
    .vld_out(conv_in_TVALID_int_regslice),
    .ack_out(conv_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_conv_in_V_data_V_U_apdone_blk)
);

memWrite_regslice_both #(
    .DataWidth( 2 ))
regslice_both_conv_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(conv_in_TKEEP),
    .vld_in(conv_in_TVALID),
    .ack_in(regslice_both_conv_in_V_keep_V_U_ack_in),
    .data_out(conv_in_TKEEP_int_regslice),
    .vld_out(regslice_both_conv_in_V_keep_V_U_vld_out),
    .ack_out(conv_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_conv_in_V_keep_V_U_apdone_blk)
);

memWrite_regslice_both #(
    .DataWidth( 2 ))
regslice_both_conv_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(conv_in_TSTRB),
    .vld_in(conv_in_TVALID),
    .ack_in(regslice_both_conv_in_V_strb_V_U_ack_in),
    .data_out(conv_in_TSTRB_int_regslice),
    .vld_out(regslice_both_conv_in_V_strb_V_U_vld_out),
    .ack_out(conv_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_conv_in_V_strb_V_U_apdone_blk)
);

memWrite_regslice_both #(
    .DataWidth( 1 ))
regslice_both_conv_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(conv_in_TLAST),
    .vld_in(conv_in_TVALID),
    .ack_in(regslice_both_conv_in_V_last_V_U_ack_in),
    .data_out(conv_in_TLAST_int_regslice),
    .vld_out(regslice_both_conv_in_V_last_V_U_vld_out),
    .ack_out(conv_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_conv_in_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state82)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter48 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter49 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter50 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter51 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter52 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter53 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter54 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter55 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter56 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter57 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter58 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter59 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter60 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter61 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter62 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter63 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter64 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter65 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter66 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter67 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter68 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter69 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter70 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter71 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter72 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter73 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter74 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter75 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter75 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln96_reg_1077_pp0_iter3_reg == 1'd0) & (cmp26_reg_1023 == 1'd0))) begin
            ap_phi_reg_pp0_iter5_top_addr_2_reg_329 <= top_addr_1_fu_871_p2;
        end else if (((icmp_ln96_reg_1077_pp0_iter3_reg == 1'd0) & (cmp26_reg_1023 == 1'd1))) begin
            ap_phi_reg_pp0_iter5_top_addr_2_reg_329 <= top_addr_fu_898_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter5_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter4_top_addr_2_reg_329;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_482_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_272 <= i_1_fu_476_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_272 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln96_reg_1077 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lane_item_idx_reg_295 <= lane_item_idx_2_reg_1122;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        lane_item_idx_reg_295 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln96_reg_1077 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lane_num_idx_reg_283 <= lane_num_idx_2_reg_1107;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        lane_num_idx_reg_283 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_482_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_idx_x_reg_318 <= out_idx_x_2_fu_698_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_idx_x_reg_318 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_482_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_idx_y_reg_307 <= out_idx_y_2_fu_676_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        out_idx_y_reg_307 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_482_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln149_1_reg_1084 <= add_ln149_1_fu_537_p2;
        and_ln159_reg_1103 <= and_ln159_fu_589_p2;
        sub_ln152_2_reg_1090 <= sub_ln152_2_fu_564_p2;
        trunc_ln148_reg_1097 <= trunc_ln148_fu_569_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln149_1_reg_1084_pp0_iter1_reg <= add_ln149_1_reg_1084;
        and_ln159_reg_1103_pp0_iter1_reg <= and_ln159_reg_1103;
        icmp_ln96_reg_1077 <= icmp_ln96_fu_482_p2;
        icmp_ln96_reg_1077_pp0_iter1_reg <= icmp_ln96_reg_1077;
        lane_item_idx_reg_295_pp0_iter1_reg <= lane_item_idx_reg_295;
        lane_num_idx_reg_283_pp0_iter1_reg <= lane_num_idx_reg_283;
        trunc_ln148_reg_1097_pp0_iter1_reg <= trunc_ln148_reg_1097;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln149_1_reg_1084_pp0_iter2_reg <= add_ln149_1_reg_1084_pp0_iter1_reg;
        add_ln149_1_reg_1084_pp0_iter3_reg <= add_ln149_1_reg_1084_pp0_iter2_reg;
        and_ln159_reg_1103_pp0_iter10_reg <= and_ln159_reg_1103_pp0_iter9_reg;
        and_ln159_reg_1103_pp0_iter11_reg <= and_ln159_reg_1103_pp0_iter10_reg;
        and_ln159_reg_1103_pp0_iter12_reg <= and_ln159_reg_1103_pp0_iter11_reg;
        and_ln159_reg_1103_pp0_iter13_reg <= and_ln159_reg_1103_pp0_iter12_reg;
        and_ln159_reg_1103_pp0_iter14_reg <= and_ln159_reg_1103_pp0_iter13_reg;
        and_ln159_reg_1103_pp0_iter15_reg <= and_ln159_reg_1103_pp0_iter14_reg;
        and_ln159_reg_1103_pp0_iter16_reg <= and_ln159_reg_1103_pp0_iter15_reg;
        and_ln159_reg_1103_pp0_iter17_reg <= and_ln159_reg_1103_pp0_iter16_reg;
        and_ln159_reg_1103_pp0_iter18_reg <= and_ln159_reg_1103_pp0_iter17_reg;
        and_ln159_reg_1103_pp0_iter19_reg <= and_ln159_reg_1103_pp0_iter18_reg;
        and_ln159_reg_1103_pp0_iter20_reg <= and_ln159_reg_1103_pp0_iter19_reg;
        and_ln159_reg_1103_pp0_iter21_reg <= and_ln159_reg_1103_pp0_iter20_reg;
        and_ln159_reg_1103_pp0_iter22_reg <= and_ln159_reg_1103_pp0_iter21_reg;
        and_ln159_reg_1103_pp0_iter23_reg <= and_ln159_reg_1103_pp0_iter22_reg;
        and_ln159_reg_1103_pp0_iter24_reg <= and_ln159_reg_1103_pp0_iter23_reg;
        and_ln159_reg_1103_pp0_iter25_reg <= and_ln159_reg_1103_pp0_iter24_reg;
        and_ln159_reg_1103_pp0_iter26_reg <= and_ln159_reg_1103_pp0_iter25_reg;
        and_ln159_reg_1103_pp0_iter27_reg <= and_ln159_reg_1103_pp0_iter26_reg;
        and_ln159_reg_1103_pp0_iter28_reg <= and_ln159_reg_1103_pp0_iter27_reg;
        and_ln159_reg_1103_pp0_iter29_reg <= and_ln159_reg_1103_pp0_iter28_reg;
        and_ln159_reg_1103_pp0_iter2_reg <= and_ln159_reg_1103_pp0_iter1_reg;
        and_ln159_reg_1103_pp0_iter30_reg <= and_ln159_reg_1103_pp0_iter29_reg;
        and_ln159_reg_1103_pp0_iter31_reg <= and_ln159_reg_1103_pp0_iter30_reg;
        and_ln159_reg_1103_pp0_iter32_reg <= and_ln159_reg_1103_pp0_iter31_reg;
        and_ln159_reg_1103_pp0_iter33_reg <= and_ln159_reg_1103_pp0_iter32_reg;
        and_ln159_reg_1103_pp0_iter34_reg <= and_ln159_reg_1103_pp0_iter33_reg;
        and_ln159_reg_1103_pp0_iter35_reg <= and_ln159_reg_1103_pp0_iter34_reg;
        and_ln159_reg_1103_pp0_iter36_reg <= and_ln159_reg_1103_pp0_iter35_reg;
        and_ln159_reg_1103_pp0_iter37_reg <= and_ln159_reg_1103_pp0_iter36_reg;
        and_ln159_reg_1103_pp0_iter38_reg <= and_ln159_reg_1103_pp0_iter37_reg;
        and_ln159_reg_1103_pp0_iter39_reg <= and_ln159_reg_1103_pp0_iter38_reg;
        and_ln159_reg_1103_pp0_iter3_reg <= and_ln159_reg_1103_pp0_iter2_reg;
        and_ln159_reg_1103_pp0_iter40_reg <= and_ln159_reg_1103_pp0_iter39_reg;
        and_ln159_reg_1103_pp0_iter41_reg <= and_ln159_reg_1103_pp0_iter40_reg;
        and_ln159_reg_1103_pp0_iter42_reg <= and_ln159_reg_1103_pp0_iter41_reg;
        and_ln159_reg_1103_pp0_iter43_reg <= and_ln159_reg_1103_pp0_iter42_reg;
        and_ln159_reg_1103_pp0_iter44_reg <= and_ln159_reg_1103_pp0_iter43_reg;
        and_ln159_reg_1103_pp0_iter45_reg <= and_ln159_reg_1103_pp0_iter44_reg;
        and_ln159_reg_1103_pp0_iter46_reg <= and_ln159_reg_1103_pp0_iter45_reg;
        and_ln159_reg_1103_pp0_iter47_reg <= and_ln159_reg_1103_pp0_iter46_reg;
        and_ln159_reg_1103_pp0_iter48_reg <= and_ln159_reg_1103_pp0_iter47_reg;
        and_ln159_reg_1103_pp0_iter49_reg <= and_ln159_reg_1103_pp0_iter48_reg;
        and_ln159_reg_1103_pp0_iter4_reg <= and_ln159_reg_1103_pp0_iter3_reg;
        and_ln159_reg_1103_pp0_iter50_reg <= and_ln159_reg_1103_pp0_iter49_reg;
        and_ln159_reg_1103_pp0_iter51_reg <= and_ln159_reg_1103_pp0_iter50_reg;
        and_ln159_reg_1103_pp0_iter52_reg <= and_ln159_reg_1103_pp0_iter51_reg;
        and_ln159_reg_1103_pp0_iter53_reg <= and_ln159_reg_1103_pp0_iter52_reg;
        and_ln159_reg_1103_pp0_iter54_reg <= and_ln159_reg_1103_pp0_iter53_reg;
        and_ln159_reg_1103_pp0_iter55_reg <= and_ln159_reg_1103_pp0_iter54_reg;
        and_ln159_reg_1103_pp0_iter56_reg <= and_ln159_reg_1103_pp0_iter55_reg;
        and_ln159_reg_1103_pp0_iter57_reg <= and_ln159_reg_1103_pp0_iter56_reg;
        and_ln159_reg_1103_pp0_iter58_reg <= and_ln159_reg_1103_pp0_iter57_reg;
        and_ln159_reg_1103_pp0_iter59_reg <= and_ln159_reg_1103_pp0_iter58_reg;
        and_ln159_reg_1103_pp0_iter5_reg <= and_ln159_reg_1103_pp0_iter4_reg;
        and_ln159_reg_1103_pp0_iter60_reg <= and_ln159_reg_1103_pp0_iter59_reg;
        and_ln159_reg_1103_pp0_iter61_reg <= and_ln159_reg_1103_pp0_iter60_reg;
        and_ln159_reg_1103_pp0_iter62_reg <= and_ln159_reg_1103_pp0_iter61_reg;
        and_ln159_reg_1103_pp0_iter63_reg <= and_ln159_reg_1103_pp0_iter62_reg;
        and_ln159_reg_1103_pp0_iter64_reg <= and_ln159_reg_1103_pp0_iter63_reg;
        and_ln159_reg_1103_pp0_iter65_reg <= and_ln159_reg_1103_pp0_iter64_reg;
        and_ln159_reg_1103_pp0_iter66_reg <= and_ln159_reg_1103_pp0_iter65_reg;
        and_ln159_reg_1103_pp0_iter67_reg <= and_ln159_reg_1103_pp0_iter66_reg;
        and_ln159_reg_1103_pp0_iter68_reg <= and_ln159_reg_1103_pp0_iter67_reg;
        and_ln159_reg_1103_pp0_iter69_reg <= and_ln159_reg_1103_pp0_iter68_reg;
        and_ln159_reg_1103_pp0_iter6_reg <= and_ln159_reg_1103_pp0_iter5_reg;
        and_ln159_reg_1103_pp0_iter70_reg <= and_ln159_reg_1103_pp0_iter69_reg;
        and_ln159_reg_1103_pp0_iter71_reg <= and_ln159_reg_1103_pp0_iter70_reg;
        and_ln159_reg_1103_pp0_iter72_reg <= and_ln159_reg_1103_pp0_iter71_reg;
        and_ln159_reg_1103_pp0_iter73_reg <= and_ln159_reg_1103_pp0_iter72_reg;
        and_ln159_reg_1103_pp0_iter74_reg <= and_ln159_reg_1103_pp0_iter73_reg;
        and_ln159_reg_1103_pp0_iter7_reg <= and_ln159_reg_1103_pp0_iter6_reg;
        and_ln159_reg_1103_pp0_iter8_reg <= and_ln159_reg_1103_pp0_iter7_reg;
        and_ln159_reg_1103_pp0_iter9_reg <= and_ln159_reg_1103_pp0_iter8_reg;
        icmp_ln96_reg_1077_pp0_iter2_reg <= icmp_ln96_reg_1077_pp0_iter1_reg;
        icmp_ln96_reg_1077_pp0_iter3_reg <= icmp_ln96_reg_1077_pp0_iter2_reg;
        lane_item_idx_reg_295_pp0_iter2_reg <= lane_item_idx_reg_295_pp0_iter1_reg;
        lane_item_idx_reg_295_pp0_iter3_reg <= lane_item_idx_reg_295_pp0_iter2_reg;
        select_ln167_reg_1137_pp0_iter2_reg <= select_ln167_reg_1137;
        select_ln167_reg_1137_pp0_iter3_reg <= select_ln167_reg_1137_pp0_iter2_reg;
        select_ln167_reg_1137_pp0_iter4_reg <= select_ln167_reg_1137_pp0_iter3_reg;
        select_ln167_reg_1137_pp0_iter5_reg <= select_ln167_reg_1137_pp0_iter4_reg;
        select_ln167_reg_1137_pp0_iter6_reg <= select_ln167_reg_1137_pp0_iter5_reg;
        tmp_1_reg_1127_pp0_iter2_reg <= tmp_1_reg_1127;
        tmp_1_reg_1127_pp0_iter3_reg <= tmp_1_reg_1127_pp0_iter2_reg;
        trunc_ln148_reg_1097_pp0_iter2_reg <= trunc_ln148_reg_1097_pp0_iter1_reg;
        trunc_ln148_reg_1097_pp0_iter3_reg <= trunc_ln148_reg_1097_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter0_top_addr_2_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter1_top_addr_2_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter2_top_addr_2_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter3_top_addr_2_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln103_fu_491_p2 == 1'd1) & (icmp_ln96_fu_482_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_0_fu_176 <= output_lane_fu_501_p1;
        buffer_1_fu_180 <= {{conv_in_TDATA_int_regslice[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        cmp26_reg_1023 <= cmp26_fu_405_p2;
        conv35_reg_1032[15 : 0] <= conv35_fu_423_p1[15 : 0];
        mul33_cast_reg_1027[15 : 0] <= mul33_cast_fu_419_p1[15 : 0];
        mul42_cast_reg_1037[15 : 0] <= mul42_cast_fu_435_p1[15 : 0];
        mul_ln96_1_reg_1057 <= grp_fu_919_p2;
        out_dim3_cast14_reg_1008[15 : 0] <= out_dim3_cast14_fu_396_p1[15 : 0];
        padd_offset_cast12_reg_1013[7 : 0] <= padd_offset_cast12_fu_399_p1[7 : 0];
        padd_offset_cast_reg_1018[7 : 0] <= padd_offset_cast_fu_402_p1[7 : 0];
        sext_ln96_reg_1052 <= sext_ln96_fu_464_p1;
        sub107_reg_1042 <= sub107_fu_442_p2;
        sub111_cast_reg_1047 <= sub111_cast_fu_454_p1;
        top_read_reg_1003 <= top;
        trunc_ln149_reg_1062 <= trunc_ln149_fu_468_p1;
        trunc_ln154_reg_1067 <= trunc_ln154_fu_472_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        div_reg_983 <= {{add_fu_360_p2[16:1]}};
        out_dim1_cast_reg_968[7 : 0] <= out_dim1_cast_fu_338_p1[7 : 0];
        out_dim2_cast_reg_973[7 : 0] <= out_dim2_cast_fu_341_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln159_reg_1103_pp0_iter4_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_addr_reg_1187 <= add_ln167_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1077 == 1'd0) & (cmp26_reg_1023 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        index_z_group_reg_1132 <= index_z_group_fu_761_p3;
        tmp_1_reg_1127 <= sub_ln152_2_reg_1090[32'd18];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_482_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        lane_item_idx_2_reg_1122 <= lane_item_idx_2_fu_712_p3;
        lane_num_idx_2_reg_1107 <= lane_num_idx_2_fu_654_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1077_pp0_iter2_reg == 1'd0) & (cmp26_reg_1023 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln149_1_reg_1172 <= grp_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1077_pp0_iter2_reg == 1'd0) & (cmp26_reg_1023 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln154_reg_1167 <= grp_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln159_reg_1103) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln167_reg_1137 <= select_ln167_fu_779_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_1127_pp0_iter2_reg == 1'd1) & (icmp_ln96_reg_1077_pp0_iter2_reg == 1'd0) & (cmp26_reg_1023 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln153_reg_1162 <= sub_ln153_fu_810_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln96_reg_1077_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        trunc_ln149_1_reg_1152 <= trunc_ln149_1_fu_804_p1;
        trunc_ln149_2_reg_1157 <= trunc_ln149_2_fu_807_p1;
    end
end

always @ (*) begin
    if ((icmp_ln96_fu_482_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter73 == 1'b0) & (ap_enable_reg_pp0_iter72 == 1'b0) & (ap_enable_reg_pp0_iter71 == 1'b0) & (ap_enable_reg_pp0_iter70 == 1'b0) & (ap_enable_reg_pp0_iter69 == 1'b0) & (ap_enable_reg_pp0_iter68 == 1'b0) & (ap_enable_reg_pp0_iter67 == 1'b0) & (ap_enable_reg_pp0_iter66 == 1'b0) & (ap_enable_reg_pp0_iter65 == 1'b0) & (ap_enable_reg_pp0_iter64 == 1'b0) & (ap_enable_reg_pp0_iter63 == 1'b0) & (ap_enable_reg_pp0_iter62 == 1'b0) & (ap_enable_reg_pp0_iter61 == 1'b0) & (ap_enable_reg_pp0_iter60 == 1'b0) & (ap_enable_reg_pp0_iter59 == 1'b0) & (ap_enable_reg_pp0_iter58 == 1'b0) & (ap_enable_reg_pp0_iter57 == 1'b0) & (ap_enable_reg_pp0_iter56 == 1'b0) & (ap_enable_reg_pp0_iter55 == 1'b0) & (ap_enable_reg_pp0_iter54 == 1'b0) & (ap_enable_reg_pp0_iter53 == 1'b0) & (ap_enable_reg_pp0_iter52 == 1'b0) & (ap_enable_reg_pp0_iter51 == 1'b0) & (ap_enable_reg_pp0_iter50 == 1'b0) & (ap_enable_reg_pp0_iter49 == 1'b0) & (ap_enable_reg_pp0_iter48 == 1'b0) & (ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln96_reg_1077 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_lane_item_idx_phi_fu_299_p4 = lane_item_idx_2_reg_1122;
    end else begin
        ap_phi_mux_lane_item_idx_phi_fu_299_p4 = lane_item_idx_reg_295;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln96_reg_1077 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_lane_num_idx_phi_fu_287_p4 = lane_num_idx_2_reg_1107;
    end else begin
        ap_phi_mux_lane_num_idx_phi_fu_287_p4 = lane_num_idx_reg_283;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln103_fu_491_p2 == 1'd1) & (icmp_ln96_fu_482_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_in_TDATA_blk_n = conv_in_TVALID_int_regslice;
    end else begin
        conv_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op188_read_state6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_in_TREADY_int_regslice = 1'b1;
    end else begin
        conv_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln159_reg_1103_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        gmem0_AWVALID = 1'b1;
    end else begin
        gmem0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter75 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter74_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_BREADY = 1'b1;
    end else begin
        gmem0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter6_reg) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem0_WVALID = 1'b1;
    end else begin
        gmem0_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln159_reg_1103_pp0_iter5_reg) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        gmem0_blk_n_AW = m_axi_gmem0_AWREADY;
    end else begin
        gmem0_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter75 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter74_reg) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_B = m_axi_gmem0_BVALID;
    end else begin
        gmem0_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter6_reg) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem0_blk_n_W = m_axi_gmem0_WREADY;
    end else begin
        gmem0_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_790_ce = 1'b1;
    end else begin
        grp_fu_790_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_799_ce = 1'b1;
    end else begin
        grp_fu_799_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_925_ce = 1'b1;
    end else begin
        grp_fu_925_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b1) & (ap_ext_blocking_n == 1'b0))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b1) & (ap_int_blocking_n == 1'b0))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b1) & (ap_str_blocking_n == 1'b0))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln96_fu_482_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter74 == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln96_fu_482_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_fu_360_p2 = (mul4_cast_fu_356_p1 + out_dim3_cast_fu_344_p1);

assign add_ln149_1_cast18_fu_881_p1 = add_ln149_1_reg_1084_pp0_iter3_reg;

assign add_ln149_1_fu_537_p2 = (mul42_cast_reg_1037 + zext_ln149_3_fu_533_p1);

assign add_ln159_fu_554_p2 = (zext_ln159_1_fu_550_p1 + zext_ln103_1_fu_487_p1);

assign add_ln167_fu_908_p2 = (zext_ln167_fu_904_p1 + top_read_reg_1003);

assign add_ln199_fu_684_p2 = (out_idx_x_reg_318 + 16'd1);

assign and_ln159_fu_589_p2 = (xor_ln159_fu_583_p2 & icmp_ln159_fu_573_p2);

assign and_ln186_1_fu_622_p2 = (icmp_ln186_3_fu_610_p2 & icmp_ln186_2_fu_605_p2);

assign and_ln186_2_fu_628_p2 = (and_ln186_fu_616_p2 & and_ln186_1_fu_622_p2);

assign and_ln186_fu_616_p2 = (icmp_ln186_fu_595_p2 & icmp_ln186_1_fu_600_p2);

assign and_ln191_fu_634_p2 = (icmp_ln186_1_fu_600_p2 & and_ln186_1_fu_622_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter74_reg)) | ((ap_predicate_op188_read_state6 == 1'b1) & (conv_in_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter74_reg)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_predicate_op188_read_state6 == 1'b1) & (conv_in_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem0_BVALID == 1'b0) & (ap_enable_reg_pp0_iter75 == 1'b1) & (1'd1 == and_ln159_reg_1103_pp0_iter74_reg)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_predicate_op188_read_state6 == 1'b1) & (conv_in_TVALID_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((gmem0_AWREADY == 1'b0) & (1'd1 == and_ln159_reg_1103_pp0_iter5_reg));
end

assign ap_block_state12_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((gmem0_WREADY == 1'b0) & (1'd1 == and_ln159_reg_1103_pp0_iter6_reg));
end

assign ap_block_state13_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter47 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage0_iter48 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter49 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter50 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter51 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter52 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter53 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage0_iter54 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage0_iter55 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter56 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter57 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter58 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter59 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter60 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage0_iter61 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter62 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage0_iter63 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter0 = ((ap_predicate_op188_read_state6 == 1'b1) & (conv_in_TVALID_int_regslice == 1'b0));
end

assign ap_block_state70_pp0_stage0_iter64 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter65 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage0_iter66 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage0_iter67 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter68 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage0_iter69 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage0_iter70 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage0_iter71 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter72 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage0_iter73 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage0_iter74 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state81_pp0_stage0_iter75 = ((gmem0_BVALID == 1'b0) & (1'd1 == and_ln159_reg_1103_pp0_iter74_reg));
end

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem0_blk_n_W & gmem0_blk_n_B & gmem0_blk_n_AW);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_phi_reg_pp0_iter0_top_addr_2_reg_329 = 'bx;

always @ (*) begin
    ap_predicate_op188_read_state6 = ((icmp_ln103_fu_491_p2 == 1'd1) & (icmp_ln96_fu_482_p2 == 1'd0));
end

assign ap_str_blocking_cur_n = conv_in_TDATA_blk_n;

assign ap_str_blocking_n = (ap_str_blocking_cur_n & 1'b1);

assign cmp26_fu_405_p2 = ((pool_on == 8'd1) ? 1'b1 : 1'b0);

assign conv35_fu_423_p1 = out_dim1xbatch;

assign conv_in_TREADY = regslice_both_conv_in_V_data_V_U_ack_in;

assign div_cast_fu_439_p1 = div_reg_983;

assign event_done = ap_done;

assign grp_fu_790_p0 = grp_fu_790_p00;

assign grp_fu_790_p00 = index_z_group_reg_1132;

assign grp_fu_799_p0 = grp_fu_799_p00;

assign grp_fu_799_p00 = lane_num_idx_reg_283_pp0_iter1_reg;

assign grp_fu_919_p0 = grp_fu_919_p00;

assign grp_fu_919_p00 = mul_ln96_fu_380_p2;

assign grp_fu_919_p1 = grp_fu_919_p10;

assign grp_fu_919_p10 = add_fu_360_p2;

assign grp_fu_925_p0 = mul33_cast_reg_1027;

assign grp_fu_925_p1 = zext_ln149_1_fu_529_p1;

assign grp_fu_925_p2 = conv35_reg_1032;

assign i_1_fu_476_p2 = (i_reg_272 + 32'd1);

assign icmp_ln103_fu_491_p2 = ((ap_phi_mux_lane_item_idx_phi_fu_299_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln159_1_fu_578_p2 = ((add_ln159_fu_554_p2 < padd_offset_cast_reg_1018) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_573_p2 = (($signed(sub_ln152_2_fu_564_p2) < $signed(out_dim3_cast14_reg_1008)) ? 1'b1 : 1'b0);

assign icmp_ln186_1_fu_600_p2 = ((zext_ln149_1_fu_529_p1 == sub111_cast_reg_1047) ? 1'b1 : 1'b0);

assign icmp_ln186_2_fu_605_p2 = ((zext_ln149_3_fu_533_p1 == sext_ln96_reg_1052) ? 1'b1 : 1'b0);

assign icmp_ln186_3_fu_610_p2 = ((ap_phi_mux_lane_item_idx_phi_fu_299_p4 == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_595_p2 = ((zext_ln149_fu_525_p1 == sub107_reg_1042) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_482_p2 = ((i_reg_272 == mul_ln96_1_reg_1057) ? 1'b1 : 1'b0);

assign index_z_group_fu_761_p3 = ((tmp_1_fu_723_p3[0:0] == 1'b1) ? sub_ln152_1_fu_746_p2 : trunc_ln152_3_fu_752_p4);

assign lane_item_idx_1_fu_706_p2 = (ap_phi_mux_lane_item_idx_phi_fu_299_p4 + 8'd1);

assign lane_item_idx_2_fu_712_p3 = ((icmp_ln186_3_fu_610_p2[0:0] == 1'b1) ? 8'd0 : lane_item_idx_1_fu_706_p2);

assign lane_num_idx_1_fu_640_p2 = (ap_phi_mux_lane_num_idx_phi_fu_287_p4 + 16'd1);

assign lane_num_idx_2_fu_654_p3 = ((and_ln186_2_fu_628_p2[0:0] == 1'b1) ? 16'd0 : select_ln188_fu_646_p3);

assign mul33_cast_fu_419_p1 = mul33_fu_414_p2;

assign mul33_fu_414_p0 = mul33_fu_414_p00;

assign mul33_fu_414_p00 = batch_indx_dim2;

assign mul33_fu_414_p1 = out_dim2_cast_reg_973;

assign mul42_cast_fu_435_p1 = mul42_fu_430_p2;

assign mul42_fu_430_p0 = mul42_fu_430_p00;

assign mul42_fu_430_p00 = batch_indx_dim1;

assign mul42_fu_430_p1 = out_dim1_cast_reg_968;

assign mul4_cast_fu_356_p1 = mul4_fu_348_p3;

assign mul4_fu_348_p3 = {{padd_offset}, {1'd0}};

assign mul_ln96_fu_380_p0 = mul_ln96_fu_380_p00;

assign mul_ln96_fu_380_p00 = out_dim2;

assign mul_ln96_fu_380_p1 = mul_ln96_fu_380_p10;

assign mul_ln96_fu_380_p10 = out_dim1;

assign out_dim1_cast11_fu_390_p1 = out_dim1;

assign out_dim1_cast_fu_338_p1 = out_dim1;

assign out_dim2_cast10_fu_393_p1 = out_dim2;

assign out_dim2_cast_fu_341_p1 = out_dim2;

assign out_dim3_cast14_fu_396_p1 = out_dim3;

assign out_dim3_cast_fu_344_p1 = out_dim3;

assign out_idx_x_1_fu_690_p3 = ((icmp_ln186_3_fu_610_p2[0:0] == 1'b1) ? add_ln199_fu_684_p2 : out_idx_x_reg_318);

assign out_idx_x_2_fu_698_p3 = ((and_ln186_1_fu_622_p2[0:0] == 1'b1) ? 16'd0 : out_idx_x_1_fu_690_p3);

assign out_idx_y_1_fu_662_p2 = (out_idx_y_reg_307 + 16'd1);

assign out_idx_y_2_fu_676_p3 = ((and_ln191_fu_634_p2[0:0] == 1'b1) ? 16'd0 : select_ln193_fu_668_p3);

assign output_lane_fu_501_p1 = conv_in_TDATA_int_regslice[7:0];

assign p_and_t_cast_fu_822_p3 = {{6'd0}, {sub_ln153_reg_1162}};

assign padd_offset_cast12_fu_399_p1 = padd_offset;

assign padd_offset_cast_fu_402_p1 = padd_offset;

assign select_ln153_fu_842_p3 = ((tmp_1_reg_1127_pp0_iter3_reg[0:0] == 1'b1) ? sub_ln153_1_fu_829_p2 : tmp_4_fu_835_p3);

assign select_ln167_fu_779_p3 = ((trunc_ln167_fu_775_p1[0:0] == 1'b1) ? buffer_1_fu_180 : buffer_0_fu_176);

assign select_ln188_fu_646_p3 = ((and_ln191_fu_634_p2[0:0] == 1'b1) ? lane_num_idx_1_fu_640_p2 : ap_phi_mux_lane_num_idx_phi_fu_287_p4);

assign select_ln193_fu_668_p3 = ((and_ln186_1_fu_622_p2[0:0] == 1'b1) ? out_idx_y_1_fu_662_p2 : out_idx_y_reg_307);

assign sext_ln96_fu_464_p1 = $signed(sub115_fu_458_p2);

assign shl_ln_fu_542_p3 = {{ap_phi_mux_lane_num_idx_phi_fu_287_p4}, {1'd0}};

assign sub107_fu_442_p2 = ($signed(div_cast_fu_439_p1) + $signed(17'd131071));

assign sub111_cast_fu_454_p1 = $signed(sub111_fu_448_p2);

assign sub111_fu_448_p2 = ($signed(out_dim2_cast10_fu_393_p1) + $signed(9'd511));

assign sub115_fu_458_p2 = ($signed(out_dim1_cast11_fu_390_p1) + $signed(9'd511));

assign sub_ln152_1_fu_746_p2 = (16'd0 - trunc_ln152_2_fu_736_p4);

assign sub_ln152_2_fu_564_p2 = (zext_ln159_2_fu_560_p1 - padd_offset_cast12_reg_1013);

assign sub_ln152_fu_730_p2 = (18'd0 - trunc_ln152_fu_720_p1);

assign sub_ln153_1_fu_829_p2 = (8'd0 - p_and_t_cast_fu_822_p3);

assign sub_ln153_fu_810_p2 = (2'd0 - trunc_ln148_reg_1097_pp0_iter2_reg);

assign tmp11_fu_884_p2 = (tmp_fu_877_p2 + add_ln149_1_cast18_fu_881_p1);

assign tmp2_fu_890_p3 = {{tmp11_fu_884_p2}, {1'd0}};

assign tmp43_fu_858_p2 = (tmp6_fu_853_p2 + trunc_ln149_1_reg_1152);

assign tmp5_fu_863_p3 = {{tmp43_fu_858_p2}, {2'd0}};

assign tmp6_fu_853_p2 = (zext_ln159_fu_819_p1 + mul_ln154_reg_1167);

assign tmp_1_fu_723_p3 = sub_ln152_2_reg_1090[32'd18];

assign tmp_4_fu_835_p3 = {{6'd0}, {trunc_ln148_reg_1097_pp0_iter3_reg}};

assign tmp_fu_877_p2 = (trunc_ln149_2_reg_1157 + mul_ln149_1_reg_1172);

assign top_addr_1_fu_871_p2 = (tmp5_fu_863_p3 + zext_ln154_1_fu_849_p1);

assign top_addr_fu_898_p2 = (tmp2_fu_890_p3 + zext_ln103_fu_815_p1);

assign trunc_ln148_fu_569_p1 = sub_ln152_2_fu_564_p2[1:0];

assign trunc_ln149_1_fu_804_p1 = grp_fu_925_p3[29:0];

assign trunc_ln149_2_fu_807_p1 = grp_fu_925_p3[30:0];

assign trunc_ln149_fu_468_p1 = out_dim1x2xbatch[30:0];

assign trunc_ln152_2_fu_736_p4 = {{sub_ln152_fu_730_p2[17:2]}};

assign trunc_ln152_3_fu_752_p4 = {{sub_ln152_2_reg_1090[17:2]}};

assign trunc_ln152_fu_720_p1 = sub_ln152_2_reg_1090[17:0];

assign trunc_ln154_fu_472_p1 = out_dim1x2xbatch[29:0];

assign trunc_ln167_fu_775_p1 = lane_item_idx_reg_295[0:0];

assign xor_ln159_fu_583_p2 = (icmp_ln159_1_fu_578_p2 ^ 1'd1);

assign zext_ln103_1_fu_487_p1 = ap_phi_mux_lane_item_idx_phi_fu_299_p4;

assign zext_ln103_fu_815_p1 = lane_item_idx_reg_295_pp0_iter3_reg;

assign zext_ln149_1_fu_529_p1 = out_idx_y_reg_307;

assign zext_ln149_3_fu_533_p1 = out_idx_x_reg_318;

assign zext_ln149_fu_525_p1 = ap_phi_mux_lane_num_idx_phi_fu_287_p4;

assign zext_ln154_1_fu_849_p1 = select_ln153_fu_842_p3;

assign zext_ln159_1_fu_550_p1 = shl_ln_fu_542_p3;

assign zext_ln159_2_fu_560_p1 = add_ln159_fu_554_p2;

assign zext_ln159_fu_819_p1 = add_ln149_1_reg_1084_pp0_iter3_reg;

assign zext_ln167_fu_904_p1 = ap_phi_reg_pp0_iter5_top_addr_2_reg_329;

always @ (posedge ap_clk) begin
    out_dim1_cast_reg_968[15:8] <= 8'b00000000;
    out_dim2_cast_reg_973[15:8] <= 8'b00000000;
    out_dim3_cast14_reg_1008[18:16] <= 3'b000;
    padd_offset_cast12_reg_1013[18:8] <= 11'b00000000000;
    padd_offset_cast_reg_1018[17:8] <= 10'b0000000000;
    mul33_cast_reg_1027[16] <= 1'b0;
    conv35_reg_1032[31:16] <= 16'b0000000000000000;
    mul42_cast_reg_1037[16] <= 1'b0;
    ap_int_blocking_n_reg <= 1'b1;
end

endmodule //memWrite
