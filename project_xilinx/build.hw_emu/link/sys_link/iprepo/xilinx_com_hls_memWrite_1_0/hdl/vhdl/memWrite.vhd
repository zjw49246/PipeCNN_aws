-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity memWrite is
generic (
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    conv_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_in_TVALID : IN STD_LOGIC;
    conv_in_TREADY : OUT STD_LOGIC;
    conv_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    conv_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    conv_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of memWrite is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "memWrite_memWrite,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.333000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2581,HLS_SYN_LUT=2663,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv17_1FFFF : STD_LOGIC_VECTOR (16 downto 0) := "11111111111111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal out_dim1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_dim2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_dim3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_dim1xbatch : STD_LOGIC_VECTOR (15 downto 0);
    signal out_dim1x2xbatch : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_indx_dim1 : STD_LOGIC_VECTOR (7 downto 0);
    signal batch_indx_dim2 : STD_LOGIC_VECTOR (7 downto 0);
    signal padd_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal pool_on : STD_LOGIC_VECTOR (7 downto 0);
    signal pool_size : STD_LOGIC_VECTOR (7 downto 0);
    signal pool_stride : STD_LOGIC_VECTOR (7 downto 0);
    signal top : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln159_reg_1103 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal and_ln159_reg_1103_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter75 : STD_LOGIC := '0';
    signal and_ln159_reg_1103_pp0_iter74_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln96_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_AWVALID : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WVALID : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BREADY : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal lane_num_idx_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal lane_num_idx_reg_283_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op188_read_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state12_io : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state63_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state64_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state65_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state66_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_state67_pp0_stage0_iter61 : BOOLEAN;
    signal ap_block_state68_pp0_stage0_iter62 : BOOLEAN;
    signal ap_block_state69_pp0_stage0_iter63 : BOOLEAN;
    signal ap_block_state70_pp0_stage0_iter64 : BOOLEAN;
    signal ap_block_state71_pp0_stage0_iter65 : BOOLEAN;
    signal ap_block_state72_pp0_stage0_iter66 : BOOLEAN;
    signal ap_block_state73_pp0_stage0_iter67 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter68 : BOOLEAN;
    signal ap_block_state75_pp0_stage0_iter69 : BOOLEAN;
    signal ap_block_state76_pp0_stage0_iter70 : BOOLEAN;
    signal ap_block_state77_pp0_stage0_iter71 : BOOLEAN;
    signal ap_block_state78_pp0_stage0_iter72 : BOOLEAN;
    signal ap_block_state79_pp0_stage0_iter73 : BOOLEAN;
    signal ap_block_state80_pp0_stage0_iter74 : BOOLEAN;
    signal ap_block_state81_pp0_stage0_iter75 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lane_item_idx_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal lane_item_idx_reg_295_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lane_item_idx_reg_295_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lane_item_idx_reg_295_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal out_idx_y_reg_307 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_idx_x_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_dim1_cast_fu_338_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_dim1_cast_reg_968 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_dim2_cast_fu_341_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_dim2_cast_reg_973 : STD_LOGIC_VECTOR (15 downto 0);
    signal div_reg_983 : STD_LOGIC_VECTOR (15 downto 0);
    signal top_read_reg_1003 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal out_dim3_cast14_fu_396_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal out_dim3_cast14_reg_1008 : STD_LOGIC_VECTOR (18 downto 0);
    signal padd_offset_cast12_fu_399_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal padd_offset_cast12_reg_1013 : STD_LOGIC_VECTOR (18 downto 0);
    signal padd_offset_cast_fu_402_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal padd_offset_cast_reg_1018 : STD_LOGIC_VECTOR (17 downto 0);
    signal cmp26_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp26_reg_1023 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul33_cast_fu_419_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul33_cast_reg_1027 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv35_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv35_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul42_cast_fu_435_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul42_cast_reg_1037 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub107_fu_442_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub107_reg_1042 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub111_cast_fu_454_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub111_cast_reg_1047 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln96_fu_464_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln96_reg_1052 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_919_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln96_1_reg_1057 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln149_fu_468_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln149_reg_1062 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln154_fu_472_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln154_reg_1067 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_1_fu_476_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln96_reg_1077 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1077_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1077_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_1077_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln149_1_fu_537_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln149_1_reg_1084 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln149_1_reg_1084_pp0_iter1_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln149_1_reg_1084_pp0_iter2_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln149_1_reg_1084_pp0_iter3_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln152_2_fu_564_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln152_2_reg_1090 : STD_LOGIC_VECTOR (18 downto 0);
    signal trunc_ln148_fu_569_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln148_reg_1097 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln148_reg_1097_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln148_reg_1097_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln148_reg_1097_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln159_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter39_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter40_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter41_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter42_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter43_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter44_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter45_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter46_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter47_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter48_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter49_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter50_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter51_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter52_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter53_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter54_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter55_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter56_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter57_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter58_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter59_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter60_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter61_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter62_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter63_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter64_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter65_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter66_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter67_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter68_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter69_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter70_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter71_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter72_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln159_reg_1103_pp0_iter73_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_num_idx_2_fu_654_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lane_num_idx_2_reg_1107 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_idx_y_2_fu_676_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_idx_x_2_fu_698_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lane_item_idx_2_fu_712_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lane_item_idx_2_reg_1122 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_723_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1127 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1127_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1127_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal index_z_group_fu_761_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_z_group_reg_1132 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln167_fu_779_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln167_reg_1137 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln167_reg_1137_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln167_reg_1137_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln167_reg_1137_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln167_reg_1137_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln167_reg_1137_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln149_1_fu_804_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln149_1_reg_1152 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln149_2_fu_807_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln149_2_reg_1157 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln153_fu_810_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln153_reg_1162 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal mul_ln154_reg_1167 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_799_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln149_1_reg_1172 : STD_LOGIC_VECTOR (30 downto 0);
    signal top_addr_1_fu_871_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal top_addr_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_addr_reg_1187 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter61 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter62 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter63 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter64 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter65 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter66 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter67 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter68 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter69 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter70 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter71 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter72 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter73 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter74 : STD_LOGIC := '0';
    signal ap_phi_mux_lane_num_idx_phi_fu_287_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_lane_item_idx_phi_fu_299_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_top_addr_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_top_addr_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_top_addr_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_top_addr_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_top_addr_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_top_addr_2_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln167_fu_908_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal buffer_0_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_lane_fu_501_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer_1_fu_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul4_fu_348_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul4_cast_fu_356_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_dim3_cast_fu_344_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_fu_360_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln96_fu_380_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln96_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln96_fu_380_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul33_fu_414_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul33_fu_414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul33_fu_414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul42_fu_430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul42_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul42_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal div_cast_fu_439_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal out_dim2_cast10_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub111_fu_448_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal out_dim1_cast11_fu_390_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub115_fu_458_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln149_3_fu_533_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_542_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln159_1_fu_550_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln103_1_fu_487_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln159_fu_554_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln159_2_fu_560_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln159_1_fu_578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln159_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln159_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln149_fu_525_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln149_1_fu_529_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln186_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_2_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_3_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln186_1_fu_622_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln186_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln191_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lane_num_idx_1_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln186_2_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln188_fu_646_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_idx_y_1_fu_662_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln193_fu_668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln199_fu_684_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_idx_x_1_fu_690_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal lane_item_idx_1_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln152_fu_720_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln152_fu_730_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln152_2_fu_736_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln152_1_fu_746_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln152_3_fu_752_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln167_fu_775_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_790_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_799_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_925_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_t_cast_fu_822_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln153_1_fu_829_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_835_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln153_fu_842_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln159_fu_819_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp6_fu_853_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp43_fu_858_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp5_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln154_1_fu_849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_877_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln149_1_cast18_fu_881_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp11_fu_884_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp2_fu_890_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln103_fu_815_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln167_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_919_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_919_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_925_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_925_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_925_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_790_ce : STD_LOGIC;
    signal grp_fu_799_ce : STD_LOGIC;
    signal grp_fu_925_ce : STD_LOGIC;
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_conv_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal conv_in_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_in_TVALID_int_regslice : STD_LOGIC;
    signal conv_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_conv_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_conv_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal conv_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_conv_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_conv_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_conv_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal conv_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_conv_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_conv_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_conv_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal conv_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_conv_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_conv_in_V_last_V_U_ack_in : STD_LOGIC;
    signal grp_fu_790_p00 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_799_p00 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_919_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_919_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul33_fu_414_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul42_fu_430_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln96_fu_380_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln96_fu_380_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component memWrite_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component memWrite_mul_16ns_30s_30_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (29 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component memWrite_mul_16ns_31s_31_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component memWrite_mul_mul_16ns_17ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component memWrite_am_addmul_16ns_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component memWrite_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        out_dim1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_dim2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_dim3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_dim1xbatch : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_dim1x2xbatch : OUT STD_LOGIC_VECTOR (31 downto 0);
        batch_indx_dim1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        batch_indx_dim2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        padd_offset : OUT STD_LOGIC_VECTOR (7 downto 0);
        pool_on : OUT STD_LOGIC_VECTOR (7 downto 0);
        pool_size : OUT STD_LOGIC_VECTOR (7 downto 0);
        pool_stride : OUT STD_LOGIC_VECTOR (7 downto 0);
        top : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component memWrite_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component memWrite_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component memWrite_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        out_dim1 => out_dim1,
        out_dim2 => out_dim2,
        out_dim3 => out_dim3,
        out_dim1xbatch => out_dim1xbatch,
        out_dim1x2xbatch => out_dim1x2xbatch,
        batch_indx_dim1 => batch_indx_dim1,
        batch_indx_dim2 => batch_indx_dim2,
        padd_offset => padd_offset,
        pool_on => pool_on,
        pool_size => pool_size,
        pool_stride => pool_stride,
        top => top,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component memWrite_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem0_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => gmem0_AWVALID,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => gmem0_addr_reg_1187,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem0_WVALID,
        I_WREADY => gmem0_WREADY,
        I_WDATA => select_ln167_reg_1137_pp0_iter6_reg,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_1,
        I_BVALID => gmem0_BVALID,
        I_BREADY => gmem0_BREADY,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    mul_8ns_8ns_16_1_1_U1 : component memWrite_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln96_fu_380_p0,
        din1 => mul_ln96_fu_380_p1,
        dout => mul_ln96_fu_380_p2);

    mul_8ns_8ns_16_1_1_U2 : component memWrite_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul33_fu_414_p0,
        din1 => mul33_fu_414_p1,
        dout => mul33_fu_414_p2);

    mul_8ns_8ns_16_1_1_U3 : component memWrite_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul42_fu_430_p0,
        din1 => mul42_fu_430_p1,
        dout => mul42_fu_430_p2);

    mul_16ns_30s_30_2_1_U4 : component memWrite_mul_16ns_30s_30_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 30,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_790_p0,
        din1 => trunc_ln154_reg_1067,
        ce => grp_fu_790_ce,
        dout => grp_fu_790_p2);

    mul_16ns_31s_31_2_1_U5 : component memWrite_mul_16ns_31s_31_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 16,
        din1_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_799_p0,
        din1 => trunc_ln149_reg_1062,
        ce => grp_fu_799_ce,
        dout => grp_fu_799_p2);

    mul_mul_16ns_17ns_32_4_1_U6 : component memWrite_mul_mul_16ns_17ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_919_p0,
        din1 => grp_fu_919_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_919_p2);

    am_addmul_16ns_16ns_16ns_32_4_1_U7 : component memWrite_am_addmul_16ns_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_925_p0,
        din1 => grp_fu_925_p1,
        din2 => grp_fu_925_p2,
        ce => grp_fu_925_ce,
        dout => grp_fu_925_p3);

    regslice_both_conv_in_V_data_V_U : component memWrite_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => conv_in_TDATA,
        vld_in => conv_in_TVALID,
        ack_in => regslice_both_conv_in_V_data_V_U_ack_in,
        data_out => conv_in_TDATA_int_regslice,
        vld_out => conv_in_TVALID_int_regslice,
        ack_out => conv_in_TREADY_int_regslice,
        apdone_blk => regslice_both_conv_in_V_data_V_U_apdone_blk);

    regslice_both_conv_in_V_keep_V_U : component memWrite_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => conv_in_TKEEP,
        vld_in => conv_in_TVALID,
        ack_in => regslice_both_conv_in_V_keep_V_U_ack_in,
        data_out => conv_in_TKEEP_int_regslice,
        vld_out => regslice_both_conv_in_V_keep_V_U_vld_out,
        ack_out => conv_in_TREADY_int_regslice,
        apdone_blk => regslice_both_conv_in_V_keep_V_U_apdone_blk);

    regslice_both_conv_in_V_strb_V_U : component memWrite_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => conv_in_TSTRB,
        vld_in => conv_in_TVALID,
        ack_in => regslice_both_conv_in_V_strb_V_U_ack_in,
        data_out => conv_in_TSTRB_int_regslice,
        vld_out => regslice_both_conv_in_V_strb_V_U_vld_out,
        ack_out => conv_in_TREADY_int_regslice,
        apdone_blk => regslice_both_conv_in_V_strb_V_U_apdone_blk);

    regslice_both_conv_in_V_last_V_U : component memWrite_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => conv_in_TLAST,
        vld_in => conv_in_TVALID,
        ack_in => regslice_both_conv_in_V_last_V_U_ack_in,
        data_out => conv_in_TLAST_int_regslice,
        vld_out => regslice_both_conv_in_V_last_V_U_vld_out,
        ack_out => conv_in_TREADY_int_regslice,
        apdone_blk => regslice_both_conv_in_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter61_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter61 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter61 <= ap_enable_reg_pp0_iter60;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter62_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter62 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter62 <= ap_enable_reg_pp0_iter61;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter63_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter63 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter63 <= ap_enable_reg_pp0_iter62;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter64_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter64 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter64 <= ap_enable_reg_pp0_iter63;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter65_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter65 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter65 <= ap_enable_reg_pp0_iter64;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter66_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter66 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter66 <= ap_enable_reg_pp0_iter65;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter67_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter67 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter67 <= ap_enable_reg_pp0_iter66;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter68_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter68 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter68 <= ap_enable_reg_pp0_iter67;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter69_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter69 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter69 <= ap_enable_reg_pp0_iter68;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter70_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter70 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter70 <= ap_enable_reg_pp0_iter69;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter71_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter71 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter71 <= ap_enable_reg_pp0_iter70;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter72_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter72 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter72 <= ap_enable_reg_pp0_iter71;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter73_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter73 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter73 <= ap_enable_reg_pp0_iter72;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter74 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter74 <= ap_enable_reg_pp0_iter73;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter75_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter75 <= ap_enable_reg_pp0_iter74;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp0_iter75 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ap_phi_reg_pp0_iter5_top_addr_2_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((icmp_ln96_reg_1077_pp0_iter3_reg = ap_const_lv1_0) and (cmp26_reg_1023 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter5_top_addr_2_reg_329 <= top_addr_1_fu_871_p2;
                elsif (((icmp_ln96_reg_1077_pp0_iter3_reg = ap_const_lv1_0) and (cmp26_reg_1023 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter5_top_addr_2_reg_329 <= top_addr_fu_898_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter5_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter4_top_addr_2_reg_329;
                end if;
            end if; 
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;

    i_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_272 <= i_1_fu_476_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    lane_item_idx_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln96_reg_1077 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                lane_item_idx_reg_295 <= lane_item_idx_2_reg_1122;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                lane_item_idx_reg_295 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    lane_num_idx_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln96_reg_1077 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                lane_num_idx_reg_283 <= lane_num_idx_2_reg_1107;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                lane_num_idx_reg_283 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_idx_x_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_idx_x_reg_318 <= out_idx_x_2_fu_698_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_idx_x_reg_318 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_idx_y_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                out_idx_y_reg_307 <= out_idx_y_2_fu_676_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                out_idx_y_reg_307 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln149_1_reg_1084 <= add_ln149_1_fu_537_p2;
                and_ln159_reg_1103 <= and_ln159_fu_589_p2;
                sub_ln152_2_reg_1090 <= sub_ln152_2_fu_564_p2;
                trunc_ln148_reg_1097 <= trunc_ln148_fu_569_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln149_1_reg_1084_pp0_iter1_reg <= add_ln149_1_reg_1084;
                and_ln159_reg_1103_pp0_iter1_reg <= and_ln159_reg_1103;
                icmp_ln96_reg_1077 <= icmp_ln96_fu_482_p2;
                icmp_ln96_reg_1077_pp0_iter1_reg <= icmp_ln96_reg_1077;
                lane_item_idx_reg_295_pp0_iter1_reg <= lane_item_idx_reg_295;
                lane_num_idx_reg_283_pp0_iter1_reg <= lane_num_idx_reg_283;
                trunc_ln148_reg_1097_pp0_iter1_reg <= trunc_ln148_reg_1097;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln149_1_reg_1084_pp0_iter2_reg <= add_ln149_1_reg_1084_pp0_iter1_reg;
                add_ln149_1_reg_1084_pp0_iter3_reg <= add_ln149_1_reg_1084_pp0_iter2_reg;
                and_ln159_reg_1103_pp0_iter10_reg <= and_ln159_reg_1103_pp0_iter9_reg;
                and_ln159_reg_1103_pp0_iter11_reg <= and_ln159_reg_1103_pp0_iter10_reg;
                and_ln159_reg_1103_pp0_iter12_reg <= and_ln159_reg_1103_pp0_iter11_reg;
                and_ln159_reg_1103_pp0_iter13_reg <= and_ln159_reg_1103_pp0_iter12_reg;
                and_ln159_reg_1103_pp0_iter14_reg <= and_ln159_reg_1103_pp0_iter13_reg;
                and_ln159_reg_1103_pp0_iter15_reg <= and_ln159_reg_1103_pp0_iter14_reg;
                and_ln159_reg_1103_pp0_iter16_reg <= and_ln159_reg_1103_pp0_iter15_reg;
                and_ln159_reg_1103_pp0_iter17_reg <= and_ln159_reg_1103_pp0_iter16_reg;
                and_ln159_reg_1103_pp0_iter18_reg <= and_ln159_reg_1103_pp0_iter17_reg;
                and_ln159_reg_1103_pp0_iter19_reg <= and_ln159_reg_1103_pp0_iter18_reg;
                and_ln159_reg_1103_pp0_iter20_reg <= and_ln159_reg_1103_pp0_iter19_reg;
                and_ln159_reg_1103_pp0_iter21_reg <= and_ln159_reg_1103_pp0_iter20_reg;
                and_ln159_reg_1103_pp0_iter22_reg <= and_ln159_reg_1103_pp0_iter21_reg;
                and_ln159_reg_1103_pp0_iter23_reg <= and_ln159_reg_1103_pp0_iter22_reg;
                and_ln159_reg_1103_pp0_iter24_reg <= and_ln159_reg_1103_pp0_iter23_reg;
                and_ln159_reg_1103_pp0_iter25_reg <= and_ln159_reg_1103_pp0_iter24_reg;
                and_ln159_reg_1103_pp0_iter26_reg <= and_ln159_reg_1103_pp0_iter25_reg;
                and_ln159_reg_1103_pp0_iter27_reg <= and_ln159_reg_1103_pp0_iter26_reg;
                and_ln159_reg_1103_pp0_iter28_reg <= and_ln159_reg_1103_pp0_iter27_reg;
                and_ln159_reg_1103_pp0_iter29_reg <= and_ln159_reg_1103_pp0_iter28_reg;
                and_ln159_reg_1103_pp0_iter2_reg <= and_ln159_reg_1103_pp0_iter1_reg;
                and_ln159_reg_1103_pp0_iter30_reg <= and_ln159_reg_1103_pp0_iter29_reg;
                and_ln159_reg_1103_pp0_iter31_reg <= and_ln159_reg_1103_pp0_iter30_reg;
                and_ln159_reg_1103_pp0_iter32_reg <= and_ln159_reg_1103_pp0_iter31_reg;
                and_ln159_reg_1103_pp0_iter33_reg <= and_ln159_reg_1103_pp0_iter32_reg;
                and_ln159_reg_1103_pp0_iter34_reg <= and_ln159_reg_1103_pp0_iter33_reg;
                and_ln159_reg_1103_pp0_iter35_reg <= and_ln159_reg_1103_pp0_iter34_reg;
                and_ln159_reg_1103_pp0_iter36_reg <= and_ln159_reg_1103_pp0_iter35_reg;
                and_ln159_reg_1103_pp0_iter37_reg <= and_ln159_reg_1103_pp0_iter36_reg;
                and_ln159_reg_1103_pp0_iter38_reg <= and_ln159_reg_1103_pp0_iter37_reg;
                and_ln159_reg_1103_pp0_iter39_reg <= and_ln159_reg_1103_pp0_iter38_reg;
                and_ln159_reg_1103_pp0_iter3_reg <= and_ln159_reg_1103_pp0_iter2_reg;
                and_ln159_reg_1103_pp0_iter40_reg <= and_ln159_reg_1103_pp0_iter39_reg;
                and_ln159_reg_1103_pp0_iter41_reg <= and_ln159_reg_1103_pp0_iter40_reg;
                and_ln159_reg_1103_pp0_iter42_reg <= and_ln159_reg_1103_pp0_iter41_reg;
                and_ln159_reg_1103_pp0_iter43_reg <= and_ln159_reg_1103_pp0_iter42_reg;
                and_ln159_reg_1103_pp0_iter44_reg <= and_ln159_reg_1103_pp0_iter43_reg;
                and_ln159_reg_1103_pp0_iter45_reg <= and_ln159_reg_1103_pp0_iter44_reg;
                and_ln159_reg_1103_pp0_iter46_reg <= and_ln159_reg_1103_pp0_iter45_reg;
                and_ln159_reg_1103_pp0_iter47_reg <= and_ln159_reg_1103_pp0_iter46_reg;
                and_ln159_reg_1103_pp0_iter48_reg <= and_ln159_reg_1103_pp0_iter47_reg;
                and_ln159_reg_1103_pp0_iter49_reg <= and_ln159_reg_1103_pp0_iter48_reg;
                and_ln159_reg_1103_pp0_iter4_reg <= and_ln159_reg_1103_pp0_iter3_reg;
                and_ln159_reg_1103_pp0_iter50_reg <= and_ln159_reg_1103_pp0_iter49_reg;
                and_ln159_reg_1103_pp0_iter51_reg <= and_ln159_reg_1103_pp0_iter50_reg;
                and_ln159_reg_1103_pp0_iter52_reg <= and_ln159_reg_1103_pp0_iter51_reg;
                and_ln159_reg_1103_pp0_iter53_reg <= and_ln159_reg_1103_pp0_iter52_reg;
                and_ln159_reg_1103_pp0_iter54_reg <= and_ln159_reg_1103_pp0_iter53_reg;
                and_ln159_reg_1103_pp0_iter55_reg <= and_ln159_reg_1103_pp0_iter54_reg;
                and_ln159_reg_1103_pp0_iter56_reg <= and_ln159_reg_1103_pp0_iter55_reg;
                and_ln159_reg_1103_pp0_iter57_reg <= and_ln159_reg_1103_pp0_iter56_reg;
                and_ln159_reg_1103_pp0_iter58_reg <= and_ln159_reg_1103_pp0_iter57_reg;
                and_ln159_reg_1103_pp0_iter59_reg <= and_ln159_reg_1103_pp0_iter58_reg;
                and_ln159_reg_1103_pp0_iter5_reg <= and_ln159_reg_1103_pp0_iter4_reg;
                and_ln159_reg_1103_pp0_iter60_reg <= and_ln159_reg_1103_pp0_iter59_reg;
                and_ln159_reg_1103_pp0_iter61_reg <= and_ln159_reg_1103_pp0_iter60_reg;
                and_ln159_reg_1103_pp0_iter62_reg <= and_ln159_reg_1103_pp0_iter61_reg;
                and_ln159_reg_1103_pp0_iter63_reg <= and_ln159_reg_1103_pp0_iter62_reg;
                and_ln159_reg_1103_pp0_iter64_reg <= and_ln159_reg_1103_pp0_iter63_reg;
                and_ln159_reg_1103_pp0_iter65_reg <= and_ln159_reg_1103_pp0_iter64_reg;
                and_ln159_reg_1103_pp0_iter66_reg <= and_ln159_reg_1103_pp0_iter65_reg;
                and_ln159_reg_1103_pp0_iter67_reg <= and_ln159_reg_1103_pp0_iter66_reg;
                and_ln159_reg_1103_pp0_iter68_reg <= and_ln159_reg_1103_pp0_iter67_reg;
                and_ln159_reg_1103_pp0_iter69_reg <= and_ln159_reg_1103_pp0_iter68_reg;
                and_ln159_reg_1103_pp0_iter6_reg <= and_ln159_reg_1103_pp0_iter5_reg;
                and_ln159_reg_1103_pp0_iter70_reg <= and_ln159_reg_1103_pp0_iter69_reg;
                and_ln159_reg_1103_pp0_iter71_reg <= and_ln159_reg_1103_pp0_iter70_reg;
                and_ln159_reg_1103_pp0_iter72_reg <= and_ln159_reg_1103_pp0_iter71_reg;
                and_ln159_reg_1103_pp0_iter73_reg <= and_ln159_reg_1103_pp0_iter72_reg;
                and_ln159_reg_1103_pp0_iter74_reg <= and_ln159_reg_1103_pp0_iter73_reg;
                and_ln159_reg_1103_pp0_iter7_reg <= and_ln159_reg_1103_pp0_iter6_reg;
                and_ln159_reg_1103_pp0_iter8_reg <= and_ln159_reg_1103_pp0_iter7_reg;
                and_ln159_reg_1103_pp0_iter9_reg <= and_ln159_reg_1103_pp0_iter8_reg;
                icmp_ln96_reg_1077_pp0_iter2_reg <= icmp_ln96_reg_1077_pp0_iter1_reg;
                icmp_ln96_reg_1077_pp0_iter3_reg <= icmp_ln96_reg_1077_pp0_iter2_reg;
                lane_item_idx_reg_295_pp0_iter2_reg <= lane_item_idx_reg_295_pp0_iter1_reg;
                lane_item_idx_reg_295_pp0_iter3_reg <= lane_item_idx_reg_295_pp0_iter2_reg;
                select_ln167_reg_1137_pp0_iter2_reg <= select_ln167_reg_1137;
                select_ln167_reg_1137_pp0_iter3_reg <= select_ln167_reg_1137_pp0_iter2_reg;
                select_ln167_reg_1137_pp0_iter4_reg <= select_ln167_reg_1137_pp0_iter3_reg;
                select_ln167_reg_1137_pp0_iter5_reg <= select_ln167_reg_1137_pp0_iter4_reg;
                select_ln167_reg_1137_pp0_iter6_reg <= select_ln167_reg_1137_pp0_iter5_reg;
                tmp_1_reg_1127_pp0_iter2_reg <= tmp_1_reg_1127;
                tmp_1_reg_1127_pp0_iter3_reg <= tmp_1_reg_1127_pp0_iter2_reg;
                trunc_ln148_reg_1097_pp0_iter2_reg <= trunc_ln148_reg_1097_pp0_iter1_reg;
                trunc_ln148_reg_1097_pp0_iter3_reg <= trunc_ln148_reg_1097_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter0_top_addr_2_reg_329;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter1_top_addr_2_reg_329;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter2_top_addr_2_reg_329;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_top_addr_2_reg_329 <= ap_phi_reg_pp0_iter3_top_addr_2_reg_329;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln103_fu_491_p2 = ap_const_lv1_1) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buffer_0_fu_176 <= output_lane_fu_501_p1;
                buffer_1_fu_180 <= conv_in_TDATA_int_regslice(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                cmp26_reg_1023 <= cmp26_fu_405_p2;
                    conv35_reg_1032(15 downto 0) <= conv35_fu_423_p1(15 downto 0);
                    mul33_cast_reg_1027(15 downto 0) <= mul33_cast_fu_419_p1(15 downto 0);
                    mul42_cast_reg_1037(15 downto 0) <= mul42_cast_fu_435_p1(15 downto 0);
                mul_ln96_1_reg_1057 <= grp_fu_919_p2;
                    out_dim3_cast14_reg_1008(15 downto 0) <= out_dim3_cast14_fu_396_p1(15 downto 0);
                    padd_offset_cast12_reg_1013(7 downto 0) <= padd_offset_cast12_fu_399_p1(7 downto 0);
                    padd_offset_cast_reg_1018(7 downto 0) <= padd_offset_cast_fu_402_p1(7 downto 0);
                sext_ln96_reg_1052 <= sext_ln96_fu_464_p1;
                sub107_reg_1042 <= sub107_fu_442_p2;
                sub111_cast_reg_1047 <= sub111_cast_fu_454_p1;
                top_read_reg_1003 <= top;
                trunc_ln149_reg_1062 <= trunc_ln149_fu_468_p1;
                trunc_ln154_reg_1067 <= trunc_ln154_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                div_reg_983 <= add_fu_360_p2(16 downto 1);
                    out_dim1_cast_reg_968(7 downto 0) <= out_dim1_cast_fu_338_p1(7 downto 0);
                    out_dim2_cast_reg_973(7 downto 0) <= out_dim2_cast_fu_341_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter4_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem0_addr_reg_1187 <= add_ln167_fu_908_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1077 = ap_const_lv1_0) and (cmp26_reg_1023 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                index_z_group_reg_1132 <= index_z_group_fu_761_p3;
                tmp_1_reg_1127 <= sub_ln152_2_reg_1090(18 downto 18);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                lane_item_idx_2_reg_1122 <= lane_item_idx_2_fu_712_p3;
                lane_num_idx_2_reg_1107 <= lane_num_idx_2_fu_654_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1077_pp0_iter2_reg = ap_const_lv1_0) and (cmp26_reg_1023 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln149_1_reg_1172 <= grp_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1077_pp0_iter2_reg = ap_const_lv1_0) and (cmp26_reg_1023 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln154_reg_1167 <= grp_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln159_reg_1103) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln167_reg_1137 <= select_ln167_fu_779_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_1127_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln96_reg_1077_pp0_iter2_reg = ap_const_lv1_0) and (cmp26_reg_1023 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln153_reg_1162 <= sub_ln153_fu_810_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln96_reg_1077_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln149_1_reg_1152 <= trunc_ln149_1_fu_804_p1;
                trunc_ln149_2_reg_1157 <= trunc_ln149_2_fu_807_p1;
            end if;
        end if;
    end process;
    out_dim1_cast_reg_968(15 downto 8) <= "00000000";
    out_dim2_cast_reg_973(15 downto 8) <= "00000000";
    out_dim3_cast14_reg_1008(18 downto 16) <= "000";
    padd_offset_cast12_reg_1013(18 downto 8) <= "00000000000";
    padd_offset_cast_reg_1018(17 downto 8) <= "0000000000";
    mul33_cast_reg_1027(16) <= '0';
    conv35_reg_1032(31 downto 16) <= "0000000000000000";
    mul42_cast_reg_1037(16) <= '0';
    ap_int_blocking_n_reg <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter0, icmp_ln96_fu_482_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter74)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln96_fu_482_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state82;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_fu_360_p2 <= std_logic_vector(unsigned(mul4_cast_fu_356_p1) + unsigned(out_dim3_cast_fu_344_p1));
    add_ln149_1_cast18_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_1_reg_1084_pp0_iter3_reg),31));
    add_ln149_1_fu_537_p2 <= std_logic_vector(unsigned(mul42_cast_reg_1037) + unsigned(zext_ln149_3_fu_533_p1));
    add_ln159_fu_554_p2 <= std_logic_vector(unsigned(zext_ln159_1_fu_550_p1) + unsigned(zext_ln103_1_fu_487_p1));
    add_ln167_fu_908_p2 <= std_logic_vector(unsigned(zext_ln167_fu_904_p1) + unsigned(top_read_reg_1003));
    add_ln199_fu_684_p2 <= std_logic_vector(unsigned(out_idx_x_reg_318) + unsigned(ap_const_lv16_1));
    and_ln159_fu_589_p2 <= (xor_ln159_fu_583_p2 and icmp_ln159_fu_573_p2);
    and_ln186_1_fu_622_p2 <= (icmp_ln186_3_fu_610_p2 and icmp_ln186_2_fu_605_p2);
    and_ln186_2_fu_628_p2 <= (and_ln186_fu_616_p2 and and_ln186_1_fu_622_p2);
    and_ln186_fu_616_p2 <= (icmp_ln186_fu_595_p2 and icmp_ln186_1_fu_600_p2);
    and_ln191_fu_634_p2 <= (icmp_ln186_1_fu_600_p2 and and_ln186_1_fu_622_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state82 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter75, and_ln159_reg_1103_pp0_iter74_reg, ap_enable_reg_pp0_iter0, gmem0_BVALID, ap_predicate_op188_read_state6, conv_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((gmem0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter74_reg)) or ((ap_predicate_op188_read_state6 = ap_const_boolean_1) and (conv_in_TVALID_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter75, and_ln159_reg_1103_pp0_iter74_reg, ap_enable_reg_pp0_iter0, gmem0_BVALID, ap_predicate_op188_read_state6, ap_block_state12_io, ap_block_state13_io, conv_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((gmem0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter74_reg)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_predicate_op188_read_state6 = ap_const_boolean_1) and (conv_in_TVALID_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter75, and_ln159_reg_1103_pp0_iter74_reg, ap_enable_reg_pp0_iter0, gmem0_BVALID, ap_predicate_op188_read_state6, ap_block_state12_io, ap_block_state13_io, conv_in_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((gmem0_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter74_reg)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state12_io) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_predicate_op188_read_state6 = ap_const_boolean_1) and (conv_in_TVALID_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_io_assign_proc : process(and_ln159_reg_1103_pp0_iter5_reg, gmem0_AWREADY)
    begin
                ap_block_state12_io <= ((gmem0_AWREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter5_reg));
    end process;

        ap_block_state12_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(and_ln159_reg_1103_pp0_iter6_reg, gmem0_WREADY)
    begin
                ap_block_state13_io <= ((gmem0_WREADY = ap_const_logic_0) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter6_reg));
    end process;

        ap_block_state13_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state62_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state63_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state64_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state65_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state66_pp0_stage0_iter60 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state67_pp0_stage0_iter61 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state68_pp0_stage0_iter62 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state69_pp0_stage0_iter63 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter0_assign_proc : process(ap_predicate_op188_read_state6, conv_in_TVALID_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter0 <= ((ap_predicate_op188_read_state6 = ap_const_boolean_1) and (conv_in_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state70_pp0_stage0_iter64 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp0_stage0_iter65 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state72_pp0_stage0_iter66 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter67 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter68 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state75_pp0_stage0_iter69 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp0_stage0_iter70 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp0_stage0_iter71 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state78_pp0_stage0_iter72 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp0_stage0_iter73 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp0_stage0_iter74 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state81_pp0_stage0_iter75_assign_proc : process(and_ln159_reg_1103_pp0_iter74_reg, gmem0_BVALID)
    begin
                ap_block_state81_pp0_stage0_iter75 <= ((gmem0_BVALID = ap_const_logic_0) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter74_reg));
    end process;

        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln96_fu_482_p2)
    begin
        if ((icmp_ln96_fu_482_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_cur_n <= (gmem0_blk_n_W and gmem0_blk_n_B and gmem0_blk_n_AW);
    ap_ext_blocking_n <= (ap_ext_blocking_cur_n and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter75, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter61, ap_enable_reg_pp0_iter62, ap_enable_reg_pp0_iter63, ap_enable_reg_pp0_iter64, ap_enable_reg_pp0_iter65, ap_enable_reg_pp0_iter66, ap_enable_reg_pp0_iter67, ap_enable_reg_pp0_iter68, ap_enable_reg_pp0_iter69, ap_enable_reg_pp0_iter70, ap_enable_reg_pp0_iter71, ap_enable_reg_pp0_iter72, ap_enable_reg_pp0_iter73, ap_enable_reg_pp0_iter74)
    begin
        if (((ap_enable_reg_pp0_iter74 = ap_const_logic_0) and (ap_enable_reg_pp0_iter73 = ap_const_logic_0) and (ap_enable_reg_pp0_iter72 = ap_const_logic_0) and (ap_enable_reg_pp0_iter71 = ap_const_logic_0) and (ap_enable_reg_pp0_iter70 = ap_const_logic_0) and (ap_enable_reg_pp0_iter69 = ap_const_logic_0) and (ap_enable_reg_pp0_iter68 = ap_const_logic_0) and (ap_enable_reg_pp0_iter67 = ap_const_logic_0) and (ap_enable_reg_pp0_iter66 = ap_const_logic_0) and (ap_enable_reg_pp0_iter65 = ap_const_logic_0) and (ap_enable_reg_pp0_iter64 = ap_const_logic_0) and (ap_enable_reg_pp0_iter63 = ap_const_logic_0) and (ap_enable_reg_pp0_iter62 = ap_const_logic_0) and (ap_enable_reg_pp0_iter61 = ap_const_logic_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter75 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_phi_mux_lane_item_idx_phi_fu_299_p4_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, lane_item_idx_reg_295, icmp_ln96_reg_1077, lane_item_idx_2_reg_1122, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln96_reg_1077 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_lane_item_idx_phi_fu_299_p4 <= lane_item_idx_2_reg_1122;
        else 
            ap_phi_mux_lane_item_idx_phi_fu_299_p4 <= lane_item_idx_reg_295;
        end if; 
    end process;


    ap_phi_mux_lane_num_idx_phi_fu_287_p4_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, lane_num_idx_reg_283, icmp_ln96_reg_1077, lane_num_idx_2_reg_1107, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln96_reg_1077 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_lane_num_idx_phi_fu_287_p4 <= lane_num_idx_2_reg_1107;
        else 
            ap_phi_mux_lane_num_idx_phi_fu_287_p4 <= lane_num_idx_reg_283;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_top_addr_2_reg_329 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op188_read_state6_assign_proc : process(icmp_ln96_fu_482_p2, icmp_ln103_fu_491_p2)
    begin
                ap_predicate_op188_read_state6 <= ((icmp_ln103_fu_491_p2 = ap_const_lv1_1) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_cur_n <= (conv_in_TDATA_blk_n);
    ap_str_blocking_n <= (ap_str_blocking_cur_n and ap_const_logic_1);
    cmp26_fu_405_p2 <= "1" when (pool_on = ap_const_lv8_1) else "0";
    conv35_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim1xbatch),32));

    conv_in_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln96_fu_482_p2, icmp_ln103_fu_491_p2, conv_in_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln103_fu_491_p2 = ap_const_lv1_1) and (icmp_ln96_fu_482_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_in_TDATA_blk_n <= conv_in_TVALID_int_regslice;
        else 
            conv_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv_in_TREADY <= regslice_both_conv_in_V_data_V_U_ack_in;

    conv_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op188_read_state6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op188_read_state6 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            conv_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    div_cast_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_reg_983),17));
    event_done <= ap_done;

    gmem0_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter6, and_ln159_reg_1103_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            gmem0_AWVALID <= ap_const_logic_1;
        else 
            gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_BREADY_assign_proc : process(ap_enable_reg_pp0_iter75, and_ln159_reg_1103_pp0_iter74_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter74_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem0_BREADY <= ap_const_logic_1;
        else 
            gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_WVALID_assign_proc : process(ap_enable_reg_pp0_iter7, and_ln159_reg_1103_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gmem0_WVALID <= ap_const_logic_1;
        else 
            gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(m_axi_gmem0_AWREADY, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0, and_ln159_reg_1103_pp0_iter5_reg)
    begin
        if (((ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter5_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(m_axi_gmem0_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter75, and_ln159_reg_1103_pp0_iter74_reg)
    begin
        if (((ap_enable_reg_pp0_iter75 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter74_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(m_axi_gmem0_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, and_ln159_reg_1103_pp0_iter6_reg)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln159_reg_1103_pp0_iter6_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_790_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_790_ce <= ap_const_logic_1;
        else 
            grp_fu_790_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_790_p0 <= grp_fu_790_p00(16 - 1 downto 0);
    grp_fu_790_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_z_group_reg_1132),30));

    grp_fu_799_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_799_ce <= ap_const_logic_1;
        else 
            grp_fu_799_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_799_p0 <= grp_fu_799_p00(16 - 1 downto 0);
    grp_fu_799_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_num_idx_reg_283_pp0_iter1_reg),31));
    grp_fu_919_p0 <= grp_fu_919_p00(16 - 1 downto 0);
    grp_fu_919_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln96_fu_380_p2),32));
    grp_fu_919_p1 <= grp_fu_919_p10(17 - 1 downto 0);
    grp_fu_919_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_360_p2),32));

    grp_fu_925_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_925_ce <= ap_const_logic_1;
        else 
            grp_fu_925_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_925_p0 <= mul33_cast_reg_1027(16 - 1 downto 0);
    grp_fu_925_p1 <= zext_ln149_1_fu_529_p1(16 - 1 downto 0);
    grp_fu_925_p2 <= conv35_reg_1032(16 - 1 downto 0);
    i_1_fu_476_p2 <= std_logic_vector(unsigned(i_reg_272) + unsigned(ap_const_lv32_1));
    icmp_ln103_fu_491_p2 <= "1" when (ap_phi_mux_lane_item_idx_phi_fu_299_p4 = ap_const_lv8_0) else "0";
    icmp_ln159_1_fu_578_p2 <= "1" when (unsigned(add_ln159_fu_554_p2) < unsigned(padd_offset_cast_reg_1018)) else "0";
    icmp_ln159_fu_573_p2 <= "1" when (signed(sub_ln152_2_fu_564_p2) < signed(out_dim3_cast14_reg_1008)) else "0";
    icmp_ln186_1_fu_600_p2 <= "1" when (zext_ln149_1_fu_529_p1 = sub111_cast_reg_1047) else "0";
    icmp_ln186_2_fu_605_p2 <= "1" when (zext_ln149_3_fu_533_p1 = sext_ln96_reg_1052) else "0";
    icmp_ln186_3_fu_610_p2 <= "1" when (ap_phi_mux_lane_item_idx_phi_fu_299_p4 = ap_const_lv8_1) else "0";
    icmp_ln186_fu_595_p2 <= "1" when (zext_ln149_fu_525_p1 = sub107_reg_1042) else "0";
    icmp_ln96_fu_482_p2 <= "1" when (i_reg_272 = mul_ln96_1_reg_1057) else "0";
    index_z_group_fu_761_p3 <= 
        sub_ln152_1_fu_746_p2 when (tmp_1_fu_723_p3(0) = '1') else 
        trunc_ln152_3_fu_752_p4;
    lane_item_idx_1_fu_706_p2 <= std_logic_vector(unsigned(ap_phi_mux_lane_item_idx_phi_fu_299_p4) + unsigned(ap_const_lv8_1));
    lane_item_idx_2_fu_712_p3 <= 
        ap_const_lv8_0 when (icmp_ln186_3_fu_610_p2(0) = '1') else 
        lane_item_idx_1_fu_706_p2;
    lane_num_idx_1_fu_640_p2 <= std_logic_vector(unsigned(ap_phi_mux_lane_num_idx_phi_fu_287_p4) + unsigned(ap_const_lv16_1));
    lane_num_idx_2_fu_654_p3 <= 
        ap_const_lv16_0 when (and_ln186_2_fu_628_p2(0) = '1') else 
        select_ln188_fu_646_p3;
    mul33_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul33_fu_414_p2),17));
    mul33_fu_414_p0 <= mul33_fu_414_p00(8 - 1 downto 0);
    mul33_fu_414_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_indx_dim2),16));
    mul33_fu_414_p1 <= out_dim2_cast_reg_973(8 - 1 downto 0);
    mul42_cast_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul42_fu_430_p2),17));
    mul42_fu_430_p0 <= mul42_fu_430_p00(8 - 1 downto 0);
    mul42_fu_430_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(batch_indx_dim1),16));
    mul42_fu_430_p1 <= out_dim1_cast_reg_968(8 - 1 downto 0);
    mul4_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul4_fu_348_p3),17));
    mul4_fu_348_p3 <= (padd_offset & ap_const_lv1_0);
    mul_ln96_fu_380_p0 <= mul_ln96_fu_380_p00(8 - 1 downto 0);
    mul_ln96_fu_380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim2),16));
    mul_ln96_fu_380_p1 <= mul_ln96_fu_380_p10(8 - 1 downto 0);
    mul_ln96_fu_380_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim1),16));
    out_dim1_cast11_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim1),9));
    out_dim1_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim1),16));
    out_dim2_cast10_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim2),9));
    out_dim2_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim2),16));
    out_dim3_cast14_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim3),19));
    out_dim3_cast_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_dim3),17));
    out_idx_x_1_fu_690_p3 <= 
        add_ln199_fu_684_p2 when (icmp_ln186_3_fu_610_p2(0) = '1') else 
        out_idx_x_reg_318;
    out_idx_x_2_fu_698_p3 <= 
        ap_const_lv16_0 when (and_ln186_1_fu_622_p2(0) = '1') else 
        out_idx_x_1_fu_690_p3;
    out_idx_y_1_fu_662_p2 <= std_logic_vector(unsigned(out_idx_y_reg_307) + unsigned(ap_const_lv16_1));
    out_idx_y_2_fu_676_p3 <= 
        ap_const_lv16_0 when (and_ln191_fu_634_p2(0) = '1') else 
        select_ln193_fu_668_p3;
    output_lane_fu_501_p1 <= conv_in_TDATA_int_regslice(8 - 1 downto 0);
    p_and_t_cast_fu_822_p3 <= (ap_const_lv6_0 & sub_ln153_reg_1162);
    padd_offset_cast12_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(padd_offset),19));
    padd_offset_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(padd_offset),18));
    select_ln153_fu_842_p3 <= 
        sub_ln153_1_fu_829_p2 when (tmp_1_reg_1127_pp0_iter3_reg(0) = '1') else 
        tmp_4_fu_835_p3;
    select_ln167_fu_779_p3 <= 
        buffer_1_fu_180 when (trunc_ln167_fu_775_p1(0) = '1') else 
        buffer_0_fu_176;
    select_ln188_fu_646_p3 <= 
        lane_num_idx_1_fu_640_p2 when (and_ln191_fu_634_p2(0) = '1') else 
        ap_phi_mux_lane_num_idx_phi_fu_287_p4;
    select_ln193_fu_668_p3 <= 
        out_idx_y_1_fu_662_p2 when (and_ln186_1_fu_622_p2(0) = '1') else 
        out_idx_y_reg_307;
        sext_ln96_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub115_fu_458_p2),17));

    shl_ln_fu_542_p3 <= (ap_phi_mux_lane_num_idx_phi_fu_287_p4 & ap_const_lv1_0);

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    sub107_fu_442_p2 <= std_logic_vector(unsigned(div_cast_fu_439_p1) + unsigned(ap_const_lv17_1FFFF));
        sub111_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub111_fu_448_p2),17));

    sub111_fu_448_p2 <= std_logic_vector(unsigned(out_dim2_cast10_fu_393_p1) + unsigned(ap_const_lv9_1FF));
    sub115_fu_458_p2 <= std_logic_vector(unsigned(out_dim1_cast11_fu_390_p1) + unsigned(ap_const_lv9_1FF));
    sub_ln152_1_fu_746_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln152_2_fu_736_p4));
    sub_ln152_2_fu_564_p2 <= std_logic_vector(unsigned(zext_ln159_2_fu_560_p1) - unsigned(padd_offset_cast12_reg_1013));
    sub_ln152_fu_730_p2 <= std_logic_vector(unsigned(ap_const_lv18_0) - unsigned(trunc_ln152_fu_720_p1));
    sub_ln153_1_fu_829_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(p_and_t_cast_fu_822_p3));
    sub_ln153_fu_810_p2 <= std_logic_vector(unsigned(ap_const_lv2_0) - unsigned(trunc_ln148_reg_1097_pp0_iter2_reg));
    tmp11_fu_884_p2 <= std_logic_vector(unsigned(tmp_fu_877_p2) + unsigned(add_ln149_1_cast18_fu_881_p1));
    tmp2_fu_890_p3 <= (tmp11_fu_884_p2 & ap_const_lv1_0);
    tmp43_fu_858_p2 <= std_logic_vector(unsigned(tmp6_fu_853_p2) + unsigned(trunc_ln149_1_reg_1152));
    tmp5_fu_863_p3 <= (tmp43_fu_858_p2 & ap_const_lv2_0);
    tmp6_fu_853_p2 <= std_logic_vector(unsigned(zext_ln159_fu_819_p1) + unsigned(mul_ln154_reg_1167));
    tmp_1_fu_723_p3 <= sub_ln152_2_reg_1090(18 downto 18);
    tmp_4_fu_835_p3 <= (ap_const_lv6_0 & trunc_ln148_reg_1097_pp0_iter3_reg);
    tmp_fu_877_p2 <= std_logic_vector(unsigned(trunc_ln149_2_reg_1157) + unsigned(mul_ln149_1_reg_1172));
    top_addr_1_fu_871_p2 <= std_logic_vector(unsigned(tmp5_fu_863_p3) + unsigned(zext_ln154_1_fu_849_p1));
    top_addr_fu_898_p2 <= std_logic_vector(unsigned(tmp2_fu_890_p3) + unsigned(zext_ln103_fu_815_p1));
    trunc_ln148_fu_569_p1 <= sub_ln152_2_fu_564_p2(2 - 1 downto 0);
    trunc_ln149_1_fu_804_p1 <= grp_fu_925_p3(30 - 1 downto 0);
    trunc_ln149_2_fu_807_p1 <= grp_fu_925_p3(31 - 1 downto 0);
    trunc_ln149_fu_468_p1 <= out_dim1x2xbatch(31 - 1 downto 0);
    trunc_ln152_2_fu_736_p4 <= sub_ln152_fu_730_p2(17 downto 2);
    trunc_ln152_3_fu_752_p4 <= sub_ln152_2_reg_1090(17 downto 2);
    trunc_ln152_fu_720_p1 <= sub_ln152_2_reg_1090(18 - 1 downto 0);
    trunc_ln154_fu_472_p1 <= out_dim1x2xbatch(30 - 1 downto 0);
    trunc_ln167_fu_775_p1 <= lane_item_idx_reg_295(1 - 1 downto 0);
    xor_ln159_fu_583_p2 <= (icmp_ln159_1_fu_578_p2 xor ap_const_lv1_1);
    zext_ln103_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_lane_item_idx_phi_fu_299_p4),18));
    zext_ln103_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lane_item_idx_reg_295_pp0_iter3_reg),32));
    zext_ln149_1_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_idx_y_reg_307),17));
    zext_ln149_3_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_idx_x_reg_318),17));
    zext_ln149_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_lane_num_idx_phi_fu_287_p4),17));
    zext_ln154_1_fu_849_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln153_fu_842_p3),32));
    zext_ln159_1_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_542_p3),18));
    zext_ln159_2_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln159_fu_554_p2),19));
    zext_ln159_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln149_1_reg_1084_pp0_iter3_reg),30));
    zext_ln167_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter5_top_addr_2_reg_329),64));
end behav;
