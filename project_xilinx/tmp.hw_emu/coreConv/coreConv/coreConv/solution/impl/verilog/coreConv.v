// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="coreConv_coreConv,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.291000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2879,HLS_SYN_LUT=2392,HLS_VERSION=2020_2}" *)

module coreConv (
        ap_clk,
        ap_rst_n,
        event_done,
        bias_in_TDATA,
        bias_in_TVALID,
        bias_in_TREADY,
        bias_in_TKEEP,
        bias_in_TSTRB,
        bias_in_TLAST,
        weight_in_TDATA,
        weight_in_TVALID,
        weight_in_TREADY,
        weight_in_TKEEP,
        weight_in_TSTRB,
        weight_in_TLAST,
        data_in_TDATA,
        data_in_TVALID,
        data_in_TREADY,
        data_in_TKEEP,
        data_in_TSTRB,
        data_in_TLAST,
        conv_out_TDATA,
        conv_out_TVALID,
        conv_out_TREADY,
        conv_out_TKEEP,
        conv_out_TSTRB,
        conv_out_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        event_start,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state12 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   event_done;
input  [15:0] bias_in_TDATA;
input   bias_in_TVALID;
output   bias_in_TREADY;
input  [1:0] bias_in_TKEEP;
input  [1:0] bias_in_TSTRB;
input  [0:0] bias_in_TLAST;
input  [63:0] weight_in_TDATA;
input   weight_in_TVALID;
output   weight_in_TREADY;
input  [7:0] weight_in_TKEEP;
input  [7:0] weight_in_TSTRB;
input  [0:0] weight_in_TLAST;
input  [63:0] data_in_TDATA;
input   data_in_TVALID;
output   data_in_TREADY;
input  [7:0] data_in_TKEEP;
input  [7:0] data_in_TSTRB;
input  [0:0] data_in_TLAST;
output  [15:0] conv_out_TDATA;
output   conv_out_TVALID;
input   conv_out_TREADY;
output  [1:0] conv_out_TKEEP;
output  [1:0] conv_out_TSTRB;
output  [0:0] conv_out_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   event_start;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
wire    ap_continue;
reg    ap_done_reg;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire  signed [31:0] output_num;
wire  signed [31:0] conv_loop_cnt;
wire   [31:0] contol;
wire   [7:0] frac_w;
wire   [7:0] frac_din;
wire   [7:0] frac_dout;
reg    bias_in_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln101_fu_671_p2;
wire   [0:0] icmp_ln104_fu_679_p2;
reg    weight_in_TDATA_blk_n;
reg    data_in_TDATA_blk_n;
reg    conv_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln163_reg_1640;
reg   [0:0] icmp_ln163_reg_1640_pp0_iter5_reg;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln163_reg_1640_pp0_iter6_reg;
reg   [31:0] k_reg_271;
reg   [31:0] empty_39_reg_426;
reg   [31:0] empty_40_reg_440;
reg   [31:0] empty_41_reg_454;
reg   [31:0] empty_42_reg_468;
reg   [31:0] empty_43_reg_482;
reg   [31:0] empty_45_reg_508;
reg   [31:0] empty_46_reg_522;
reg   [31:0] empty_47_reg_536;
reg   [31:0] empty_48_reg_550;
reg   [31:0] empty_49_reg_564;
wire    ap_CS_fsm_state2;
wire   [0:0] empty_fu_587_p1;
reg   [0:0] empty_reg_1513;
wire    ap_CS_fsm_state3;
wire   [31:0] grp_fu_583_p2;
reg   [31:0] mul_reg_1519;
wire   [31:0] sub113_fu_591_p2;
reg   [31:0] sub113_reg_1524;
wire  signed [31:0] sub151_cast_fu_633_p1;
reg  signed [31:0] sub151_cast_reg_1529;
wire   [31:0] neg_fu_643_p2;
reg   [31:0] neg_reg_1535;
wire  signed [31:0] sext_ln101_fu_661_p1;
reg  signed [31:0] sext_ln101_reg_1541;
wire   [31:0] k_1_fu_665_p2;
reg    ap_predicate_op90_read_state4;
reg    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
reg    ap_block_state10_pp0_stage0_iter6;
reg    ap_block_state10_io;
reg    ap_block_state11_pp0_stage0_iter7;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln101_reg_1552;
reg   [0:0] icmp_ln101_reg_1552_pp0_iter1_reg;
reg   [0:0] icmp_ln101_reg_1552_pp0_iter2_reg;
reg   [0:0] icmp_ln104_reg_1556;
reg   [0:0] icmp_ln104_reg_1556_pp0_iter1_reg;
reg   [0:0] icmp_ln104_reg_1556_pp0_iter2_reg;
wire   [7:0] mac_data_lane_fu_724_p1;
reg   [7:0] mac_data_lane_reg_1560;
reg  signed [7:0] mac_data_lane_reg_1560_pp0_iter1_reg;
wire   [7:0] mac_weight_lane_fu_728_p1;
reg   [7:0] mac_weight_lane_reg_1565;
reg  signed [7:0] mac_weight_lane_reg_1565_pp0_iter1_reg;
reg   [7:0] mac_data_lane_1_reg_1570;
reg  signed [7:0] mac_data_lane_1_reg_1570_pp0_iter1_reg;
reg   [7:0] mac_weight_lane_1_reg_1575;
reg  signed [7:0] mac_weight_lane_1_reg_1575_pp0_iter1_reg;
reg   [7:0] mac_data_lane_4_reg_1580;
reg  signed [7:0] mac_data_lane_4_reg_1580_pp0_iter1_reg;
reg   [7:0] mac_weight_lane_4_reg_1585;
reg  signed [7:0] mac_weight_lane_4_reg_1585_pp0_iter1_reg;
reg   [7:0] mac_data_lane_5_reg_1590;
reg  signed [7:0] mac_data_lane_5_reg_1590_pp0_iter1_reg;
reg   [7:0] mac_weight_lane_5_reg_1595;
reg  signed [7:0] mac_weight_lane_5_reg_1595_pp0_iter1_reg;
wire   [0:0] icmp_ln163_fu_904_p2;
reg   [0:0] icmp_ln163_reg_1640_pp0_iter1_reg;
reg   [0:0] icmp_ln163_reg_1640_pp0_iter2_reg;
reg   [0:0] icmp_ln163_reg_1640_pp0_iter3_reg;
reg   [0:0] icmp_ln163_reg_1640_pp0_iter4_reg;
reg   [7:0] bias_load_reg_1644;
reg   [7:0] bias_load_reg_1644_pp0_iter2_reg;
reg   [7:0] bias_load_reg_1644_pp0_iter3_reg;
reg   [7:0] bias_load_reg_1644_pp0_iter4_reg;
reg   [7:0] bias_load_reg_1644_pp0_iter5_reg;
reg   [7:0] bias_1_load_reg_1649;
reg   [7:0] bias_1_load_reg_1649_pp0_iter2_reg;
reg   [7:0] bias_1_load_reg_1649_pp0_iter3_reg;
reg   [7:0] bias_1_load_reg_1649_pp0_iter4_reg;
reg   [7:0] bias_1_load_reg_1649_pp0_iter5_reg;
wire   [31:0] conv_acc_fu_1002_p2;
reg   [31:0] conv_acc_reg_1674;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] conv_acc_2_fu_1020_p2;
reg   [31:0] conv_acc_2_reg_1679;
wire   [31:0] add_ln170_3_fu_1032_p2;
reg   [31:0] add_ln170_3_reg_1684;
wire   [31:0] add_ln170_8_fu_1044_p2;
reg   [31:0] add_ln170_8_reg_1689;
wire   [31:0] conv_acc_1_fu_1062_p2;
reg   [31:0] conv_acc_1_reg_1694;
reg   [0:0] tmp_1_reg_1699;
wire   [31:0] conv_acc_3_fu_1087_p2;
reg   [31:0] conv_acc_3_reg_1704;
reg   [0:0] tmp_4_reg_1709;
wire   [31:0] conv_with_rnd_bit_fu_1130_p2;
reg   [31:0] conv_with_rnd_bit_reg_1714;
wire   [8:0] add_ln94_fu_1136_p2;
reg   [8:0] add_ln94_reg_1719;
reg   [23:0] tmp_2_reg_1724;
wire   [31:0] conv_with_rnd_bit_1_fu_1182_p2;
reg   [31:0] conv_with_rnd_bit_1_reg_1729;
wire   [8:0] add_ln94_1_fu_1188_p2;
reg   [8:0] add_ln94_1_reg_1734;
reg   [23:0] tmp_5_reg_1739;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter4;
reg    ap_condition_pp0_exit_iter3_state7;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] ap_phi_mux_empty_38_phi_fu_418_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_38_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_38_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_38_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_38_reg_414;
reg   [31:0] ap_phi_mux_empty_39_phi_fu_431_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_39_reg_426;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_39_reg_426;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_39_reg_426;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_39_reg_426;
reg   [31:0] ap_phi_mux_empty_40_phi_fu_445_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_40_reg_440;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_40_reg_440;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_40_reg_440;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_40_reg_440;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_41_reg_454;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_41_reg_454;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_41_reg_454;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_41_reg_454;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_42_reg_468;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_42_reg_468;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_42_reg_468;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_42_reg_468;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_43_reg_482;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_43_reg_482;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_43_reg_482;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_43_reg_482;
reg   [31:0] ap_phi_mux_empty_44_phi_fu_500_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_44_reg_496;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_44_reg_496;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_44_reg_496;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_44_reg_496;
reg   [31:0] ap_phi_mux_empty_45_phi_fu_513_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_45_reg_508;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_45_reg_508;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_45_reg_508;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_45_reg_508;
reg   [31:0] ap_phi_mux_empty_46_phi_fu_527_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_46_reg_522;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_46_reg_522;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_46_reg_522;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_46_reg_522;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_47_reg_536;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_47_reg_536;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_47_reg_536;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_47_reg_536;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_48_reg_550;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_48_reg_550;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_48_reg_550;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_48_reg_550;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_49_reg_564;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_49_reg_564;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_49_reg_564;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_49_reg_564;
reg   [31:0] conv_inner_cnt_fu_168;
wire   [31:0] conv_inner_cnt_1_fu_909_p2;
reg    ap_block_state1;
reg   [7:0] bias_fu_172;
wire   [7:0] bias_ch_out_lane_fu_689_p1;
reg   [7:0] bias_1_fu_176;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] sub113_fu_591_p0;
wire  signed [7:0] frac_w_cast38_fu_596_p0;
wire  signed [7:0] frac_w_cast_fu_599_p0;
wire  signed [7:0] frac_dout_cast39_fu_605_p0;
wire  signed [7:0] frac_dout_cast_fu_608_p0;
wire  signed [8:0] frac_din_cast_fu_602_p1;
wire   [8:0] tmp_fu_611_p2;
wire  signed [9:0] tmp_cast_fu_617_p1;
wire  signed [9:0] frac_w_cast_fu_599_p1;
wire   [9:0] sub150_fu_621_p2;
wire  signed [9:0] frac_dout_cast_fu_608_p1;
wire   [9:0] sub151_fu_627_p2;
wire   [31:0] shr_fu_637_p2;
wire  signed [8:0] frac_w_cast38_fu_596_p1;
wire  signed [8:0] frac_dout_cast39_fu_605_p1;
wire   [8:0] sub174_fu_649_p2;
wire   [8:0] sub175_fu_655_p2;
wire  signed [7:0] mac_data_lane_2_fu_752_p4;
wire  signed [7:0] mac_weight_lane_2_fu_762_p4;
wire  signed [7:0] mac_data_lane_3_fu_772_p4;
wire  signed [7:0] mac_weight_lane_3_fu_782_p4;
wire  signed [7:0] mac_data_lane_6_fu_832_p4;
wire  signed [7:0] mac_weight_lane_6_fu_842_p4;
wire  signed [7:0] mac_data_lane_7_fu_852_p4;
wire  signed [7:0] mac_weight_lane_7_fu_862_p4;
wire  signed [15:0] output_fu_932_p2;
wire  signed [15:0] mul_ln55_fu_948_p2;
wire  signed [15:0] output_1_fu_964_p2;
wire  signed [15:0] mul_ln55_4_fu_980_p2;
wire  signed [16:0] grp_fu_1429_p3;
wire  signed [16:0] grp_fu_1438_p3;
wire  signed [31:0] sext_ln144_2_fu_993_p1;
wire   [31:0] add_ln144_2_fu_996_p2;
wire  signed [31:0] sext_ln144_1_fu_990_p1;
wire  signed [16:0] grp_fu_1447_p3;
wire  signed [16:0] grp_fu_1456_p3;
wire  signed [31:0] sext_ln144_5_fu_1011_p1;
wire   [31:0] add_ln144_6_fu_1014_p2;
wire  signed [31:0] sext_ln144_4_fu_1008_p1;
wire   [31:0] add_ln170_2_fu_1026_p2;
wire   [31:0] add_ln170_7_fu_1038_p2;
wire   [31:0] add_ln170_fu_1050_p2;
wire   [31:0] add_ln170_1_fu_1056_p2;
wire   [31:0] add_ln170_5_fu_1075_p2;
wire   [31:0] add_ln170_6_fu_1081_p2;
wire   [31:0] ashr_ln181_fu_1106_p2;
wire   [31:0] conv_sign_exten_fu_1100_p3;
wire   [8:0] trunc_ln181_1_fu_1114_p1;
wire   [8:0] trunc_ln181_fu_1110_p1;
wire   [31:0] or_ln181_fu_1118_p2;
wire   [8:0] or_ln181_2_fu_1124_p2;
wire   [31:0] ashr_ln181_1_fu_1158_p2;
wire   [31:0] conv_sign_exten_1_fu_1152_p3;
wire   [8:0] trunc_ln181_3_fu_1166_p1;
wire   [8:0] trunc_ln181_2_fu_1162_p1;
wire   [31:0] or_ln181_1_fu_1170_p2;
wire   [8:0] or_ln181_3_fu_1176_p2;
wire   [7:0] sext_ln101cast_fu_1214_p1;
wire   [7:0] ashr_ln192_fu_1217_p2;
wire   [8:0] or_ln192_fu_1226_p2;
wire  signed [8:0] sext_ln192_2_fu_1222_p1;
wire   [8:0] conv_sum_bias_fu_1231_p2;
wire   [0:0] icmp_ln184_fu_1204_p2;
wire   [0:0] icmp_ln186_fu_1209_p2;
wire   [0:0] xor_ln184_fu_1247_p2;
wire   [0:0] and_ln186_fu_1253_p2;
wire   [0:0] or_ln186_fu_1267_p2;
wire   [7:0] select_ln186_fu_1259_p3;
wire   [7:0] phitmp2_fu_1237_p4;
wire   [7:0] conv_final_fu_1273_p3;
wire   [0:0] tmp_3_fu_1285_p3;
wire   [6:0] trunc_ln96_fu_1281_p1;
wire   [6:0] conv_ch_in_lane_fu_1293_p3;
wire   [7:0] zext_ln82_fu_1301_p1;
wire   [7:0] sext_ln101cast34_fu_1322_p1;
wire   [7:0] ashr_ln192_1_fu_1325_p2;
wire   [8:0] or_ln192_1_fu_1334_p2;
wire  signed [8:0] sext_ln192_3_fu_1330_p1;
wire   [8:0] conv_sum_bias_1_fu_1339_p2;
wire   [0:0] icmp_ln184_1_fu_1312_p2;
wire   [0:0] icmp_ln186_1_fu_1317_p2;
wire   [0:0] xor_ln184_1_fu_1355_p2;
wire   [0:0] and_ln186_1_fu_1361_p2;
wire   [0:0] or_ln186_1_fu_1375_p2;
wire   [7:0] select_ln186_2_fu_1367_p3;
wire   [7:0] phitmp3_fu_1345_p4;
wire   [7:0] conv_final_1_fu_1381_p3;
wire   [0:0] tmp_6_fu_1393_p3;
wire   [6:0] trunc_ln96_1_fu_1389_p1;
wire   [6:0] conv_ch_in_lane_2_fu_1401_p3;
wire   [7:0] zext_ln82_1_fu_1409_p1;
wire   [7:0] conv_ch_in_lane_3_fu_1413_p3;
wire   [7:0] conv_ch_in_lane_1_fu_1305_p3;
reg    grp_fu_1429_ce;
reg    grp_fu_1438_ce;
reg    grp_fu_1447_ce;
reg    grp_fu_1456_ce;
wire    ap_CS_fsm_state12;
wire    regslice_both_conv_out_V_data_V_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
wire    ap_str_blocking_cur_n;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_bias_in_V_data_V_U_apdone_blk;
wire   [15:0] bias_in_TDATA_int_regslice;
wire    bias_in_TVALID_int_regslice;
reg    bias_in_TREADY_int_regslice;
wire    regslice_both_bias_in_V_data_V_U_ack_in;
wire    regslice_both_bias_in_V_keep_V_U_apdone_blk;
wire   [1:0] bias_in_TKEEP_int_regslice;
wire    regslice_both_bias_in_V_keep_V_U_vld_out;
wire    regslice_both_bias_in_V_keep_V_U_ack_in;
wire    regslice_both_bias_in_V_strb_V_U_apdone_blk;
wire   [1:0] bias_in_TSTRB_int_regslice;
wire    regslice_both_bias_in_V_strb_V_U_vld_out;
wire    regslice_both_bias_in_V_strb_V_U_ack_in;
wire    regslice_both_bias_in_V_last_V_U_apdone_blk;
wire   [0:0] bias_in_TLAST_int_regslice;
wire    regslice_both_bias_in_V_last_V_U_vld_out;
wire    regslice_both_bias_in_V_last_V_U_ack_in;
wire    regslice_both_weight_in_V_data_V_U_apdone_blk;
wire   [63:0] weight_in_TDATA_int_regslice;
wire    weight_in_TVALID_int_regslice;
reg    weight_in_TREADY_int_regslice;
wire    regslice_both_weight_in_V_data_V_U_ack_in;
wire    regslice_both_weight_in_V_keep_V_U_apdone_blk;
wire   [7:0] weight_in_TKEEP_int_regslice;
wire    regslice_both_weight_in_V_keep_V_U_vld_out;
wire    regslice_both_weight_in_V_keep_V_U_ack_in;
wire    regslice_both_weight_in_V_strb_V_U_apdone_blk;
wire   [7:0] weight_in_TSTRB_int_regslice;
wire    regslice_both_weight_in_V_strb_V_U_vld_out;
wire    regslice_both_weight_in_V_strb_V_U_ack_in;
wire    regslice_both_weight_in_V_last_V_U_apdone_blk;
wire   [0:0] weight_in_TLAST_int_regslice;
wire    regslice_both_weight_in_V_last_V_U_vld_out;
wire    regslice_both_weight_in_V_last_V_U_ack_in;
wire    regslice_both_data_in_V_data_V_U_apdone_blk;
wire   [63:0] data_in_TDATA_int_regslice;
wire    data_in_TVALID_int_regslice;
reg    data_in_TREADY_int_regslice;
wire    regslice_both_data_in_V_data_V_U_ack_in;
wire    regslice_both_data_in_V_keep_V_U_apdone_blk;
wire   [7:0] data_in_TKEEP_int_regslice;
wire    regslice_both_data_in_V_keep_V_U_vld_out;
wire    regslice_both_data_in_V_keep_V_U_ack_in;
wire    regslice_both_data_in_V_strb_V_U_apdone_blk;
wire   [7:0] data_in_TSTRB_int_regslice;
wire    regslice_both_data_in_V_strb_V_U_vld_out;
wire    regslice_both_data_in_V_strb_V_U_ack_in;
wire    regslice_both_data_in_V_last_V_U_apdone_blk;
wire   [0:0] data_in_TLAST_int_regslice;
wire    regslice_both_data_in_V_last_V_U_vld_out;
wire    regslice_both_data_in_V_last_V_U_ack_in;
wire   [15:0] conv_out_TDATA_int_regslice;
reg    conv_out_TVALID_int_regslice;
wire    conv_out_TREADY_int_regslice;
wire    regslice_both_conv_out_V_data_V_U_vld_out;
wire    regslice_both_conv_out_V_keep_V_U_apdone_blk;
wire    regslice_both_conv_out_V_keep_V_U_ack_in_dummy;
wire    regslice_both_conv_out_V_keep_V_U_vld_out;
wire    regslice_both_conv_out_V_strb_V_U_apdone_blk;
wire    regslice_both_conv_out_V_strb_V_U_ack_in_dummy;
wire    regslice_both_conv_out_V_strb_V_U_vld_out;
wire    regslice_both_conv_out_V_last_V_U_apdone_blk;
wire    regslice_both_conv_out_V_last_V_U_ack_in_dummy;
wire    regslice_both_conv_out_V_last_V_U_vld_out;
reg    ap_condition_258;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

coreConv_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .output_num(output_num),
    .conv_loop_cnt(conv_loop_cnt),
    .contol(contol),
    .frac_w(frac_w),
    .frac_din(frac_din),
    .frac_dout(frac_dout),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_continue(ap_continue),
    .ap_idle(ap_idle)
);

coreConv_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_loop_cnt),
    .din1(output_num),
    .ce(1'b1),
    .dout(grp_fu_583_p2)
);

coreConv_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U2(
    .din0(mac_weight_lane_reg_1565_pp0_iter1_reg),
    .din1(mac_data_lane_reg_1560_pp0_iter1_reg),
    .dout(output_fu_932_p2)
);

coreConv_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U3(
    .din0(mac_weight_lane_1_reg_1575_pp0_iter1_reg),
    .din1(mac_data_lane_1_reg_1570_pp0_iter1_reg),
    .dout(mul_ln55_fu_948_p2)
);

coreConv_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U4(
    .din0(mac_weight_lane_4_reg_1585_pp0_iter1_reg),
    .din1(mac_data_lane_4_reg_1580_pp0_iter1_reg),
    .dout(output_1_fu_964_p2)
);

coreConv_mul_8s_8s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_8s_8s_16_1_1_U5(
    .din0(mac_weight_lane_5_reg_1595_pp0_iter1_reg),
    .din1(mac_data_lane_5_reg_1590_pp0_iter1_reg),
    .dout(mul_ln55_4_fu_980_p2)
);

coreConv_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mac_weight_lane_2_fu_762_p4),
    .din1(mac_data_lane_2_fu_752_p4),
    .din2(mul_ln55_fu_948_p2),
    .ce(grp_fu_1429_ce),
    .dout(grp_fu_1429_p3)
);

coreConv_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mac_weight_lane_3_fu_782_p4),
    .din1(mac_data_lane_3_fu_772_p4),
    .din2(output_fu_932_p2),
    .ce(grp_fu_1438_ce),
    .dout(grp_fu_1438_p3)
);

coreConv_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mac_weight_lane_6_fu_842_p4),
    .din1(mac_data_lane_6_fu_832_p4),
    .din2(mul_ln55_4_fu_980_p2),
    .ce(grp_fu_1447_ce),
    .dout(grp_fu_1447_p3)
);

coreConv_mac_muladd_8s_8s_16s_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
mac_muladd_8s_8s_16s_17_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(mac_weight_lane_7_fu_862_p4),
    .din1(mac_data_lane_7_fu_852_p4),
    .din2(output_1_fu_964_p2),
    .ce(grp_fu_1456_ce),
    .dout(grp_fu_1456_p3)
);

coreConv_regslice_both #(
    .DataWidth( 16 ))
regslice_both_bias_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(bias_in_TDATA),
    .vld_in(bias_in_TVALID),
    .ack_in(regslice_both_bias_in_V_data_V_U_ack_in),
    .data_out(bias_in_TDATA_int_regslice),
    .vld_out(bias_in_TVALID_int_regslice),
    .ack_out(bias_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_bias_in_V_data_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 2 ))
regslice_both_bias_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(bias_in_TKEEP),
    .vld_in(bias_in_TVALID),
    .ack_in(regslice_both_bias_in_V_keep_V_U_ack_in),
    .data_out(bias_in_TKEEP_int_regslice),
    .vld_out(regslice_both_bias_in_V_keep_V_U_vld_out),
    .ack_out(bias_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_bias_in_V_keep_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 2 ))
regslice_both_bias_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(bias_in_TSTRB),
    .vld_in(bias_in_TVALID),
    .ack_in(regslice_both_bias_in_V_strb_V_U_ack_in),
    .data_out(bias_in_TSTRB_int_regslice),
    .vld_out(regslice_both_bias_in_V_strb_V_U_vld_out),
    .ack_out(bias_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_bias_in_V_strb_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 1 ))
regslice_both_bias_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(bias_in_TLAST),
    .vld_in(bias_in_TVALID),
    .ack_in(regslice_both_bias_in_V_last_V_U_ack_in),
    .data_out(bias_in_TLAST_int_regslice),
    .vld_out(regslice_both_bias_in_V_last_V_U_vld_out),
    .ack_out(bias_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_bias_in_V_last_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 64 ))
regslice_both_weight_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weight_in_TDATA),
    .vld_in(weight_in_TVALID),
    .ack_in(regslice_both_weight_in_V_data_V_U_ack_in),
    .data_out(weight_in_TDATA_int_regslice),
    .vld_out(weight_in_TVALID_int_regslice),
    .ack_out(weight_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_weight_in_V_data_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 8 ))
regslice_both_weight_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weight_in_TKEEP),
    .vld_in(weight_in_TVALID),
    .ack_in(regslice_both_weight_in_V_keep_V_U_ack_in),
    .data_out(weight_in_TKEEP_int_regslice),
    .vld_out(regslice_both_weight_in_V_keep_V_U_vld_out),
    .ack_out(weight_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_weight_in_V_keep_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 8 ))
regslice_both_weight_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weight_in_TSTRB),
    .vld_in(weight_in_TVALID),
    .ack_in(regslice_both_weight_in_V_strb_V_U_ack_in),
    .data_out(weight_in_TSTRB_int_regslice),
    .vld_out(regslice_both_weight_in_V_strb_V_U_vld_out),
    .ack_out(weight_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_weight_in_V_strb_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 1 ))
regslice_both_weight_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(weight_in_TLAST),
    .vld_in(weight_in_TVALID),
    .ack_in(regslice_both_weight_in_V_last_V_U_ack_in),
    .data_out(weight_in_TLAST_int_regslice),
    .vld_out(regslice_both_weight_in_V_last_V_U_vld_out),
    .ack_out(weight_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_weight_in_V_last_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 64 ))
regslice_both_data_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_in_TDATA),
    .vld_in(data_in_TVALID),
    .ack_in(regslice_both_data_in_V_data_V_U_ack_in),
    .data_out(data_in_TDATA_int_regslice),
    .vld_out(data_in_TVALID_int_regslice),
    .ack_out(data_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_in_V_data_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_in_TKEEP),
    .vld_in(data_in_TVALID),
    .ack_in(regslice_both_data_in_V_keep_V_U_ack_in),
    .data_out(data_in_TKEEP_int_regslice),
    .vld_out(regslice_both_data_in_V_keep_V_U_vld_out),
    .ack_out(data_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_in_V_keep_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 8 ))
regslice_both_data_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_in_TSTRB),
    .vld_in(data_in_TVALID),
    .ack_in(regslice_both_data_in_V_strb_V_U_ack_in),
    .data_out(data_in_TSTRB_int_regslice),
    .vld_out(regslice_both_data_in_V_strb_V_U_vld_out),
    .ack_out(data_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_in_V_strb_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 1 ))
regslice_both_data_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(data_in_TLAST),
    .vld_in(data_in_TVALID),
    .ack_in(regslice_both_data_in_V_last_V_U_ack_in),
    .data_out(data_in_TLAST_int_regslice),
    .vld_out(regslice_both_data_in_V_last_V_U_vld_out),
    .ack_out(data_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_data_in_V_last_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 16 ))
regslice_both_conv_out_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(conv_out_TDATA_int_regslice),
    .vld_in(conv_out_TVALID_int_regslice),
    .ack_in(conv_out_TREADY_int_regslice),
    .data_out(conv_out_TDATA),
    .vld_out(regslice_both_conv_out_V_data_V_U_vld_out),
    .ack_out(conv_out_TREADY),
    .apdone_blk(regslice_both_conv_out_V_data_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 2 ))
regslice_both_conv_out_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(conv_out_TVALID_int_regslice),
    .ack_in(regslice_both_conv_out_V_keep_V_U_ack_in_dummy),
    .data_out(conv_out_TKEEP),
    .vld_out(regslice_both_conv_out_V_keep_V_U_vld_out),
    .ack_out(conv_out_TREADY),
    .apdone_blk(regslice_both_conv_out_V_keep_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 2 ))
regslice_both_conv_out_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(2'd0),
    .vld_in(conv_out_TVALID_int_regslice),
    .ack_in(regslice_both_conv_out_V_strb_V_U_ack_in_dummy),
    .data_out(conv_out_TSTRB),
    .vld_out(regslice_both_conv_out_V_strb_V_U_vld_out),
    .ack_out(conv_out_TREADY),
    .apdone_blk(regslice_both_conv_out_V_strb_V_U_apdone_blk)
);

coreConv_regslice_both #(
    .DataWidth( 1 ))
regslice_both_conv_out_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(conv_out_TVALID_int_regslice),
    .ack_in(regslice_both_conv_out_V_last_V_U_ack_in_dummy),
    .data_out(conv_out_TLAST),
    .vld_out(regslice_both_conv_out_V_last_V_U_vld_out),
    .ack_out(conv_out_TREADY),
    .apdone_blk(regslice_both_conv_out_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state12) & (regslice_both_conv_out_V_data_V_U_apdone_blk == 1'b0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter3_state7)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_38_reg_414 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_38_reg_414 <= ap_phi_reg_pp0_iter0_empty_38_reg_414;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_39_reg_426 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_39_reg_426 <= ap_phi_reg_pp0_iter0_empty_39_reg_426;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_40_reg_440 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_40_reg_440 <= ap_phi_reg_pp0_iter0_empty_40_reg_440;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_41_reg_454 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_41_reg_454 <= ap_phi_reg_pp0_iter0_empty_41_reg_454;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_42_reg_468 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_42_reg_468 <= ap_phi_reg_pp0_iter0_empty_42_reg_468;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_43_reg_482 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_43_reg_482 <= ap_phi_reg_pp0_iter0_empty_43_reg_482;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_44_reg_496 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_44_reg_496 <= ap_phi_reg_pp0_iter0_empty_44_reg_496;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_45_reg_508 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_45_reg_508 <= ap_phi_reg_pp0_iter0_empty_45_reg_508;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_46_reg_522 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_46_reg_522 <= ap_phi_reg_pp0_iter0_empty_46_reg_522;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_47_reg_536 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_47_reg_536 <= ap_phi_reg_pp0_iter0_empty_47_reg_536;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_48_reg_550 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_48_reg_550 <= ap_phi_reg_pp0_iter0_empty_48_reg_550;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_258)) begin
        if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_empty_49_reg_564 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_49_reg_564 <= ap_phi_reg_pp0_iter0_empty_49_reg_564;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln163_fu_904_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        conv_inner_cnt_fu_168 <= 32'd0;
    end else if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln163_fu_904_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_inner_cnt_fu_168 <= conv_inner_cnt_1_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_39_reg_426 <= empty_40_reg_440;
        end else if ((1'b1 == 1'b1)) begin
            empty_39_reg_426 <= ap_phi_reg_pp0_iter3_empty_39_reg_426;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_40_reg_440 <= empty_41_reg_454;
        end else if ((1'b1 == 1'b1)) begin
            empty_40_reg_440 <= ap_phi_reg_pp0_iter3_empty_40_reg_440;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_41_reg_454 <= empty_42_reg_468;
        end else if ((1'b1 == 1'b1)) begin
            empty_41_reg_454 <= ap_phi_reg_pp0_iter3_empty_41_reg_454;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_42_reg_468 <= empty_43_reg_482;
        end else if ((1'b1 == 1'b1)) begin
            empty_42_reg_468 <= ap_phi_reg_pp0_iter3_empty_42_reg_468;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_43_reg_482 <= conv_acc_2_reg_1679;
        end else if ((1'b1 == 1'b1)) begin
            empty_43_reg_482 <= ap_phi_reg_pp0_iter3_empty_43_reg_482;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_45_reg_508 <= empty_46_reg_522;
        end else if ((1'b1 == 1'b1)) begin
            empty_45_reg_508 <= ap_phi_reg_pp0_iter3_empty_45_reg_508;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_46_reg_522 <= empty_47_reg_536;
        end else if ((1'b1 == 1'b1)) begin
            empty_46_reg_522 <= ap_phi_reg_pp0_iter3_empty_46_reg_522;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_47_reg_536 <= empty_48_reg_550;
        end else if ((1'b1 == 1'b1)) begin
            empty_47_reg_536 <= ap_phi_reg_pp0_iter3_empty_47_reg_536;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_48_reg_550 <= empty_49_reg_564;
        end else if ((1'b1 == 1'b1)) begin
            empty_48_reg_550 <= ap_phi_reg_pp0_iter3_empty_48_reg_550;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
            empty_49_reg_564 <= conv_acc_reg_1674;
        end else if ((1'b1 == 1'b1)) begin
            empty_49_reg_564 <= ap_phi_reg_pp0_iter3_empty_49_reg_564;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        k_reg_271 <= k_1_fu_665_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_271 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1640_pp0_iter2_reg == 1'd1) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        add_ln170_3_reg_1684 <= add_ln170_3_fu_1032_p2;
        add_ln170_8_reg_1689 <= add_ln170_8_fu_1044_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1640_pp0_iter4_reg == 1'd1))) begin
        add_ln94_1_reg_1734 <= add_ln94_1_fu_1188_p2;
        add_ln94_reg_1719 <= add_ln94_fu_1136_p2;
        conv_with_rnd_bit_1_reg_1729 <= conv_with_rnd_bit_1_fu_1182_p2;
        conv_with_rnd_bit_reg_1714 <= conv_with_rnd_bit_fu_1130_p2;
        tmp_2_reg_1724 <= {{conv_with_rnd_bit_fu_1130_p2[31:8]}};
        tmp_5_reg_1739 <= {{conv_with_rnd_bit_1_fu_1182_p2[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_empty_38_reg_414 <= ap_phi_reg_pp0_iter1_empty_38_reg_414;
        ap_phi_reg_pp0_iter2_empty_39_reg_426 <= ap_phi_reg_pp0_iter1_empty_39_reg_426;
        ap_phi_reg_pp0_iter2_empty_40_reg_440 <= ap_phi_reg_pp0_iter1_empty_40_reg_440;
        ap_phi_reg_pp0_iter2_empty_41_reg_454 <= ap_phi_reg_pp0_iter1_empty_41_reg_454;
        ap_phi_reg_pp0_iter2_empty_42_reg_468 <= ap_phi_reg_pp0_iter1_empty_42_reg_468;
        ap_phi_reg_pp0_iter2_empty_43_reg_482 <= ap_phi_reg_pp0_iter1_empty_43_reg_482;
        ap_phi_reg_pp0_iter2_empty_44_reg_496 <= ap_phi_reg_pp0_iter1_empty_44_reg_496;
        ap_phi_reg_pp0_iter2_empty_45_reg_508 <= ap_phi_reg_pp0_iter1_empty_45_reg_508;
        ap_phi_reg_pp0_iter2_empty_46_reg_522 <= ap_phi_reg_pp0_iter1_empty_46_reg_522;
        ap_phi_reg_pp0_iter2_empty_47_reg_536 <= ap_phi_reg_pp0_iter1_empty_47_reg_536;
        ap_phi_reg_pp0_iter2_empty_48_reg_550 <= ap_phi_reg_pp0_iter1_empty_48_reg_550;
        ap_phi_reg_pp0_iter2_empty_49_reg_564 <= ap_phi_reg_pp0_iter1_empty_49_reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_empty_38_reg_414 <= ap_phi_reg_pp0_iter2_empty_38_reg_414;
        ap_phi_reg_pp0_iter3_empty_39_reg_426 <= ap_phi_reg_pp0_iter2_empty_39_reg_426;
        ap_phi_reg_pp0_iter3_empty_40_reg_440 <= ap_phi_reg_pp0_iter2_empty_40_reg_440;
        ap_phi_reg_pp0_iter3_empty_41_reg_454 <= ap_phi_reg_pp0_iter2_empty_41_reg_454;
        ap_phi_reg_pp0_iter3_empty_42_reg_468 <= ap_phi_reg_pp0_iter2_empty_42_reg_468;
        ap_phi_reg_pp0_iter3_empty_43_reg_482 <= ap_phi_reg_pp0_iter2_empty_43_reg_482;
        ap_phi_reg_pp0_iter3_empty_44_reg_496 <= ap_phi_reg_pp0_iter2_empty_44_reg_496;
        ap_phi_reg_pp0_iter3_empty_45_reg_508 <= ap_phi_reg_pp0_iter2_empty_45_reg_508;
        ap_phi_reg_pp0_iter3_empty_46_reg_522 <= ap_phi_reg_pp0_iter2_empty_46_reg_522;
        ap_phi_reg_pp0_iter3_empty_47_reg_536 <= ap_phi_reg_pp0_iter2_empty_47_reg_536;
        ap_phi_reg_pp0_iter3_empty_48_reg_550 <= ap_phi_reg_pp0_iter2_empty_48_reg_550;
        ap_phi_reg_pp0_iter3_empty_49_reg_564 <= ap_phi_reg_pp0_iter2_empty_49_reg_564;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_fu_176 <= {{bias_in_TDATA_int_regslice[15:8]}};
        bias_fu_172 <= bias_ch_out_lane_fu_689_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln163_reg_1640 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln101_reg_1552 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_load_reg_1649 <= bias_1_fu_176;
        bias_load_reg_1644 <= bias_fu_172;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bias_1_load_reg_1649_pp0_iter2_reg <= bias_1_load_reg_1649;
        bias_1_load_reg_1649_pp0_iter3_reg <= bias_1_load_reg_1649_pp0_iter2_reg;
        bias_1_load_reg_1649_pp0_iter4_reg <= bias_1_load_reg_1649_pp0_iter3_reg;
        bias_1_load_reg_1649_pp0_iter5_reg <= bias_1_load_reg_1649_pp0_iter4_reg;
        bias_load_reg_1644_pp0_iter2_reg <= bias_load_reg_1644;
        bias_load_reg_1644_pp0_iter3_reg <= bias_load_reg_1644_pp0_iter2_reg;
        bias_load_reg_1644_pp0_iter4_reg <= bias_load_reg_1644_pp0_iter3_reg;
        bias_load_reg_1644_pp0_iter5_reg <= bias_load_reg_1644_pp0_iter4_reg;
        icmp_ln101_reg_1552_pp0_iter2_reg <= icmp_ln101_reg_1552_pp0_iter1_reg;
        icmp_ln104_reg_1556_pp0_iter2_reg <= icmp_ln104_reg_1556_pp0_iter1_reg;
        icmp_ln163_reg_1640_pp0_iter2_reg <= icmp_ln163_reg_1640_pp0_iter1_reg;
        icmp_ln163_reg_1640_pp0_iter3_reg <= icmp_ln163_reg_1640_pp0_iter2_reg;
        icmp_ln163_reg_1640_pp0_iter4_reg <= icmp_ln163_reg_1640_pp0_iter3_reg;
        icmp_ln163_reg_1640_pp0_iter5_reg <= icmp_ln163_reg_1640_pp0_iter4_reg;
        icmp_ln163_reg_1640_pp0_iter6_reg <= icmp_ln163_reg_1640_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln163_reg_1640_pp0_iter3_reg == 1'd1))) begin
        conv_acc_1_reg_1694 <= conv_acc_1_fu_1062_p2;
        conv_acc_3_reg_1704 <= conv_acc_3_fu_1087_p2;
        tmp_1_reg_1699 <= conv_acc_1_fu_1062_p2[32'd31];
        tmp_4_reg_1709 <= conv_acc_3_fu_1087_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        conv_acc_2_reg_1679 <= conv_acc_2_fu_1020_p2;
        conv_acc_reg_1674 <= conv_acc_fu_1002_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_reg_1513 <= empty_fu_587_p1;
        mul_reg_1519 <= grp_fu_583_p2;
        neg_reg_1535 <= neg_fu_643_p2;
        sext_ln101_reg_1541 <= sext_ln101_fu_661_p1;
        sub113_reg_1524 <= sub113_fu_591_p2;
        sub151_cast_reg_1529 <= sub151_cast_fu_633_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln101_reg_1552 <= icmp_ln101_fu_671_p2;
        icmp_ln101_reg_1552_pp0_iter1_reg <= icmp_ln101_reg_1552;
        icmp_ln104_reg_1556_pp0_iter1_reg <= icmp_ln104_reg_1556;
        icmp_ln163_reg_1640_pp0_iter1_reg <= icmp_ln163_reg_1640;
        mac_data_lane_1_reg_1570_pp0_iter1_reg <= mac_data_lane_1_reg_1570;
        mac_data_lane_4_reg_1580_pp0_iter1_reg <= mac_data_lane_4_reg_1580;
        mac_data_lane_5_reg_1590_pp0_iter1_reg <= mac_data_lane_5_reg_1590;
        mac_data_lane_reg_1560_pp0_iter1_reg <= mac_data_lane_reg_1560;
        mac_weight_lane_1_reg_1575_pp0_iter1_reg <= mac_weight_lane_1_reg_1575;
        mac_weight_lane_4_reg_1585_pp0_iter1_reg <= mac_weight_lane_4_reg_1585;
        mac_weight_lane_5_reg_1595_pp0_iter1_reg <= mac_weight_lane_5_reg_1595;
        mac_weight_lane_reg_1565_pp0_iter1_reg <= mac_weight_lane_reg_1565;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln104_reg_1556 <= icmp_ln104_fu_679_p2;
        icmp_ln163_reg_1640 <= icmp_ln163_fu_904_p2;
        mac_data_lane_1_reg_1570 <= {{data_in_TDATA_int_regslice[15:8]}};
        mac_data_lane_4_reg_1580 <= {{data_in_TDATA_int_regslice[39:32]}};
        mac_data_lane_5_reg_1590 <= {{data_in_TDATA_int_regslice[47:40]}};
        mac_data_lane_reg_1560 <= mac_data_lane_fu_724_p1;
        mac_weight_lane_1_reg_1575 <= {{weight_in_TDATA_int_regslice[15:8]}};
        mac_weight_lane_4_reg_1585 <= {{weight_in_TDATA_int_regslice[39:32]}};
        mac_weight_lane_5_reg_1595 <= {{weight_in_TDATA_int_regslice[47:40]}};
        mac_weight_lane_reg_1565 <= mac_weight_lane_fu_728_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_pp0_exit_iter3_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter3_state7 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_671_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (regslice_both_conv_out_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_38_phi_fu_418_p4 = empty_39_reg_426;
    end else begin
        ap_phi_mux_empty_38_phi_fu_418_p4 = ap_phi_reg_pp0_iter3_empty_38_reg_414;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_39_phi_fu_431_p4 = empty_40_reg_440;
    end else begin
        ap_phi_mux_empty_39_phi_fu_431_p4 = ap_phi_reg_pp0_iter3_empty_39_reg_426;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_40_phi_fu_445_p4 = empty_41_reg_454;
    end else begin
        ap_phi_mux_empty_40_phi_fu_445_p4 = ap_phi_reg_pp0_iter3_empty_40_reg_440;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_44_phi_fu_500_p4 = empty_45_reg_508;
    end else begin
        ap_phi_mux_empty_44_phi_fu_500_p4 = ap_phi_reg_pp0_iter3_empty_44_reg_496;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_45_phi_fu_513_p4 = empty_46_reg_522;
    end else begin
        ap_phi_mux_empty_45_phi_fu_513_p4 = ap_phi_reg_pp0_iter3_empty_45_reg_508;
    end
end

always @ (*) begin
    if (((icmp_ln104_reg_1556_pp0_iter2_reg == 1'd0) & (icmp_ln101_reg_1552_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_empty_46_phi_fu_527_p4 = empty_47_reg_536;
    end else begin
        ap_phi_mux_empty_46_phi_fu_527_p4 = ap_phi_reg_pp0_iter3_empty_46_reg_522;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (regslice_both_conv_out_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_in_TDATA_blk_n = bias_in_TVALID_int_regslice;
    end else begin
        bias_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op90_read_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_in_TREADY_int_regslice = 1'b1;
    end else begin
        bias_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln163_reg_1640_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        conv_out_TDATA_blk_n = conv_out_TREADY_int_regslice;
    end else begin
        conv_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_TVALID_int_regslice = 1'b1;
    end else begin
        conv_out_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_TDATA_blk_n = data_in_TVALID_int_regslice;
    end else begin
        data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_in_TREADY_int_regslice = 1'b1;
    end else begin
        data_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1429_ce = 1'b1;
    end else begin
        grp_fu_1429_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1438_ce = 1'b1;
    end else begin
        grp_fu_1438_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1447_ce = 1'b1;
    end else begin
        grp_fu_1447_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1456_ce = 1'b1;
    end else begin
        grp_fu_1456_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b1) & (ap_ext_blocking_n == 1'b0))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b1) & (ap_int_blocking_n == 1'b0))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b1) & (ap_str_blocking_n == 1'b0))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_in_TDATA_blk_n = weight_in_TVALID_int_regslice;
    end else begin
        weight_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln101_fu_671_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_in_TREADY_int_regslice = 1'b1;
    end else begin
        weight_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (regslice_both_conv_out_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln144_2_fu_996_p2 = ($signed(sext_ln144_2_fu_993_p1) + $signed(ap_phi_mux_empty_44_phi_fu_500_p4));

assign add_ln144_6_fu_1014_p2 = ($signed(sext_ln144_5_fu_1011_p1) + $signed(ap_phi_mux_empty_38_phi_fu_418_p4));

assign add_ln170_1_fu_1056_p2 = (add_ln170_fu_1050_p2 + empty_48_reg_550);

assign add_ln170_2_fu_1026_p2 = (ap_phi_mux_empty_46_phi_fu_527_p4 + conv_acc_fu_1002_p2);

assign add_ln170_3_fu_1032_p2 = (add_ln170_2_fu_1026_p2 + ap_phi_mux_empty_45_phi_fu_513_p4);

assign add_ln170_5_fu_1075_p2 = (empty_43_reg_482 + empty_41_reg_454);

assign add_ln170_6_fu_1081_p2 = (add_ln170_5_fu_1075_p2 + empty_42_reg_468);

assign add_ln170_7_fu_1038_p2 = (ap_phi_mux_empty_40_phi_fu_445_p4 + conv_acc_2_fu_1020_p2);

assign add_ln170_8_fu_1044_p2 = (add_ln170_7_fu_1038_p2 + ap_phi_mux_empty_39_phi_fu_431_p4);

assign add_ln170_fu_1050_p2 = (empty_49_reg_564 + empty_47_reg_536);

assign add_ln94_1_fu_1188_p2 = (or_ln181_3_fu_1176_p2 + 9'd1);

assign add_ln94_fu_1136_p2 = (or_ln181_2_fu_1124_p2 + 9'd1);

assign and_ln186_1_fu_1361_p2 = (xor_ln184_1_fu_1355_p2 & icmp_ln186_1_fu_1317_p2);

assign and_ln186_fu_1253_p2 = (xor_ln184_fu_1247_p2 & icmp_ln186_fu_1209_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln163_reg_1640_pp0_iter6_reg == 1'd1) & (ap_enable_reg_pp0_iter7 == 1'b1) & (conv_out_TREADY_int_regslice == 1'b0)) | ((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter6 == 1'b1) & (conv_out_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln101_fu_671_p2 == 1'd0) & (data_in_TVALID_int_regslice == 1'b0)) | ((icmp_ln101_fu_671_p2 == 1'd0) & (weight_in_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op90_read_state4 == 1'b1) & (bias_in_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln163_reg_1640_pp0_iter6_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln101_fu_671_p2 == 1'd0) & (data_in_TVALID_int_regslice == 1'b0)) | ((icmp_ln101_fu_671_p2 == 1'd0) & (weight_in_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op90_read_state4 == 1'b1) & (bias_in_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((icmp_ln163_reg_1640_pp0_iter6_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state10_io) | ((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (((icmp_ln101_fu_671_p2 == 1'd0) & (data_in_TVALID_int_regslice == 1'b0)) | ((icmp_ln101_fu_671_p2 == 1'd0) & (weight_in_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op90_read_state4 == 1'b1) & (bias_in_TVALID_int_regslice == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter6 = ((icmp_ln163_reg_1640_pp0_iter5_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((icmp_ln163_reg_1640_pp0_iter6_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter7 = ((icmp_ln163_reg_1640_pp0_iter6_reg == 1'd1) & (conv_out_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = (((icmp_ln101_fu_671_p2 == 1'd0) & (data_in_TVALID_int_regslice == 1'b0)) | ((icmp_ln101_fu_671_p2 == 1'd0) & (weight_in_TVALID_int_regslice == 1'b0)) | ((ap_predicate_op90_read_state4 == 1'b1) & (bias_in_TVALID_int_regslice == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_258 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_n = (1'b1 & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

assign ap_phi_reg_pp0_iter0_empty_38_reg_414 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_39_reg_426 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_40_reg_440 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_41_reg_454 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_42_reg_468 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_43_reg_482 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_44_reg_496 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_45_reg_508 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_46_reg_522 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_47_reg_536 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_48_reg_550 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_49_reg_564 = 'bx;

always @ (*) begin
    ap_predicate_op90_read_state4 = ((icmp_ln104_fu_679_p2 == 1'd1) & (icmp_ln101_fu_671_p2 == 1'd0));
end

assign ap_str_blocking_cur_n = (weight_in_TDATA_blk_n & data_in_TDATA_blk_n & conv_out_TDATA_blk_n & bias_in_TDATA_blk_n);

assign ap_str_blocking_n = (ap_str_blocking_cur_n & 1'b1);

assign ashr_ln181_1_fu_1158_p2 = $signed(conv_acc_3_reg_1704) >>> sub151_cast_reg_1529;

assign ashr_ln181_fu_1106_p2 = $signed(conv_acc_1_reg_1694) >>> sub151_cast_reg_1529;

assign ashr_ln192_1_fu_1325_p2 = $signed(bias_1_load_reg_1649_pp0_iter5_reg) >>> sext_ln101cast34_fu_1322_p1;

assign ashr_ln192_fu_1217_p2 = $signed(bias_load_reg_1644_pp0_iter5_reg) >>> sext_ln101cast_fu_1214_p1;

assign bias_ch_out_lane_fu_689_p1 = bias_in_TDATA_int_regslice[7:0];

assign bias_in_TREADY = regslice_both_bias_in_V_data_V_U_ack_in;

assign conv_acc_1_fu_1062_p2 = (add_ln170_3_reg_1684 + add_ln170_1_fu_1056_p2);

assign conv_acc_2_fu_1020_p2 = ($signed(add_ln144_6_fu_1014_p2) + $signed(sext_ln144_4_fu_1008_p1));

assign conv_acc_3_fu_1087_p2 = (add_ln170_8_reg_1689 + add_ln170_6_fu_1081_p2);

assign conv_acc_fu_1002_p2 = ($signed(add_ln144_2_fu_996_p2) + $signed(sext_ln144_1_fu_990_p1));

assign conv_ch_in_lane_1_fu_1305_p3 = ((empty_reg_1513[0:0] == 1'b1) ? zext_ln82_fu_1301_p1 : conv_final_fu_1273_p3);

assign conv_ch_in_lane_2_fu_1401_p3 = ((tmp_6_fu_1393_p3[0:0] == 1'b1) ? 7'd0 : trunc_ln96_1_fu_1389_p1);

assign conv_ch_in_lane_3_fu_1413_p3 = ((empty_reg_1513[0:0] == 1'b1) ? zext_ln82_1_fu_1409_p1 : conv_final_1_fu_1381_p3);

assign conv_ch_in_lane_fu_1293_p3 = ((tmp_3_fu_1285_p3[0:0] == 1'b1) ? 7'd0 : trunc_ln96_fu_1281_p1);

assign conv_final_1_fu_1381_p3 = ((or_ln186_1_fu_1375_p2[0:0] == 1'b1) ? select_ln186_2_fu_1367_p3 : phitmp3_fu_1345_p4);

assign conv_final_fu_1273_p3 = ((or_ln186_fu_1267_p2[0:0] == 1'b1) ? select_ln186_fu_1259_p3 : phitmp2_fu_1237_p4);

assign conv_inner_cnt_1_fu_909_p2 = (conv_inner_cnt_fu_168 + 32'd1);

assign conv_out_TDATA_int_regslice = {{conv_ch_in_lane_3_fu_1413_p3}, {conv_ch_in_lane_1_fu_1305_p3}};

assign conv_out_TVALID = regslice_both_conv_out_V_data_V_U_vld_out;

assign conv_sign_exten_1_fu_1152_p3 = ((tmp_4_reg_1709[0:0] == 1'b1) ? neg_reg_1535 : 32'd0);

assign conv_sign_exten_fu_1100_p3 = ((tmp_1_reg_1699[0:0] == 1'b1) ? neg_reg_1535 : 32'd0);

assign conv_sum_bias_1_fu_1339_p2 = ($signed(or_ln192_1_fu_1334_p2) + $signed(sext_ln192_3_fu_1330_p1));

assign conv_sum_bias_fu_1231_p2 = ($signed(or_ln192_fu_1226_p2) + $signed(sext_ln192_2_fu_1222_p1));

assign conv_with_rnd_bit_1_fu_1182_p2 = (or_ln181_1_fu_1170_p2 + 32'd1);

assign conv_with_rnd_bit_fu_1130_p2 = (or_ln181_fu_1118_p2 + 32'd1);

assign data_in_TREADY = regslice_both_data_in_V_data_V_U_ack_in;

assign empty_fu_587_p1 = contol[0:0];

assign event_done = ap_done;

assign frac_din_cast_fu_602_p1 = $signed(frac_din);

assign frac_dout_cast39_fu_605_p0 = frac_dout;

assign frac_dout_cast39_fu_605_p1 = frac_dout_cast39_fu_605_p0;

assign frac_dout_cast_fu_608_p0 = frac_dout;

assign frac_dout_cast_fu_608_p1 = frac_dout_cast_fu_608_p0;

assign frac_w_cast38_fu_596_p0 = frac_w;

assign frac_w_cast38_fu_596_p1 = frac_w_cast38_fu_596_p0;

assign frac_w_cast_fu_599_p0 = frac_w;

assign frac_w_cast_fu_599_p1 = frac_w_cast_fu_599_p0;

assign icmp_ln101_fu_671_p2 = ((k_reg_271 == mul_reg_1519) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_679_p2 = ((conv_inner_cnt_fu_168 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_904_p2 = ((conv_inner_cnt_fu_168 == sub113_reg_1524) ? 1'b1 : 1'b0);

assign icmp_ln184_1_fu_1312_p2 = (($signed(tmp_5_reg_1739) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_1204_p2 = (($signed(tmp_2_reg_1724) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign icmp_ln186_1_fu_1317_p2 = (($signed(conv_with_rnd_bit_1_reg_1729) < $signed(32'd4294967040)) ? 1'b1 : 1'b0);

assign icmp_ln186_fu_1209_p2 = (($signed(conv_with_rnd_bit_reg_1714) < $signed(32'd4294967040)) ? 1'b1 : 1'b0);

assign k_1_fu_665_p2 = (k_reg_271 + 32'd1);

assign mac_data_lane_2_fu_752_p4 = {{data_in_TDATA_int_regslice[23:16]}};

assign mac_data_lane_3_fu_772_p4 = {{data_in_TDATA_int_regslice[31:24]}};

assign mac_data_lane_6_fu_832_p4 = {{data_in_TDATA_int_regslice[55:48]}};

assign mac_data_lane_7_fu_852_p4 = {{data_in_TDATA_int_regslice[63:56]}};

assign mac_data_lane_fu_724_p1 = data_in_TDATA_int_regslice[7:0];

assign mac_weight_lane_2_fu_762_p4 = {{weight_in_TDATA_int_regslice[23:16]}};

assign mac_weight_lane_3_fu_782_p4 = {{weight_in_TDATA_int_regslice[31:24]}};

assign mac_weight_lane_6_fu_842_p4 = {{weight_in_TDATA_int_regslice[55:48]}};

assign mac_weight_lane_7_fu_862_p4 = {{weight_in_TDATA_int_regslice[63:56]}};

assign mac_weight_lane_fu_728_p1 = weight_in_TDATA_int_regslice[7:0];

assign neg_fu_643_p2 = (shr_fu_637_p2 ^ 32'd4294967295);

assign or_ln181_1_fu_1170_p2 = (conv_sign_exten_1_fu_1152_p3 | ashr_ln181_1_fu_1158_p2);

assign or_ln181_2_fu_1124_p2 = (trunc_ln181_fu_1110_p1 | trunc_ln181_1_fu_1114_p1);

assign or_ln181_3_fu_1176_p2 = (trunc_ln181_3_fu_1166_p1 | trunc_ln181_2_fu_1162_p1);

assign or_ln181_fu_1118_p2 = (conv_sign_exten_fu_1100_p3 | ashr_ln181_fu_1106_p2);

assign or_ln186_1_fu_1375_p2 = (icmp_ln184_1_fu_1312_p2 | and_ln186_1_fu_1361_p2);

assign or_ln186_fu_1267_p2 = (icmp_ln184_fu_1204_p2 | and_ln186_fu_1253_p2);

assign or_ln192_1_fu_1334_p2 = (9'd1 | add_ln94_1_reg_1734);

assign or_ln192_fu_1226_p2 = (9'd1 | add_ln94_reg_1719);

assign phitmp2_fu_1237_p4 = {{conv_sum_bias_fu_1231_p2[8:1]}};

assign phitmp3_fu_1345_p4 = {{conv_sum_bias_1_fu_1339_p2[8:1]}};

assign select_ln186_2_fu_1367_p3 = ((and_ln186_1_fu_1361_p2[0:0] == 1'b1) ? 8'd128 : 8'd127);

assign select_ln186_fu_1259_p3 = ((and_ln186_fu_1253_p2[0:0] == 1'b1) ? 8'd128 : 8'd127);

assign sext_ln101_fu_661_p1 = $signed(sub175_fu_655_p2);

assign sext_ln101cast34_fu_1322_p1 = sext_ln101_reg_1541[7:0];

assign sext_ln101cast_fu_1214_p1 = sext_ln101_reg_1541[7:0];

assign sext_ln144_1_fu_990_p1 = grp_fu_1429_p3;

assign sext_ln144_2_fu_993_p1 = grp_fu_1438_p3;

assign sext_ln144_4_fu_1008_p1 = grp_fu_1447_p3;

assign sext_ln144_5_fu_1011_p1 = grp_fu_1456_p3;

assign sext_ln192_2_fu_1222_p1 = $signed(ashr_ln192_fu_1217_p2);

assign sext_ln192_3_fu_1330_p1 = $signed(ashr_ln192_1_fu_1325_p2);

assign shr_fu_637_p2 = 32'd4294967295 >> sub151_cast_fu_633_p1;

assign sub113_fu_591_p0 = conv_loop_cnt;

assign sub113_fu_591_p2 = ($signed(sub113_fu_591_p0) + $signed(32'd4294967295));

assign sub150_fu_621_p2 = ($signed(tmp_cast_fu_617_p1) + $signed(frac_w_cast_fu_599_p1));

assign sub151_cast_fu_633_p1 = $signed(sub151_fu_627_p2);

assign sub151_fu_627_p2 = ($signed(sub150_fu_621_p2) - $signed(frac_dout_cast_fu_608_p1));

assign sub174_fu_649_p2 = ($signed(frac_w_cast38_fu_596_p1) - $signed(frac_dout_cast39_fu_605_p1));

assign sub175_fu_655_p2 = ($signed(sub174_fu_649_p2) + $signed(9'd511));

assign tmp_3_fu_1285_p3 = conv_final_fu_1273_p3[32'd7];

assign tmp_6_fu_1393_p3 = conv_final_1_fu_1381_p3[32'd7];

assign tmp_cast_fu_617_p1 = $signed(tmp_fu_611_p2);

assign tmp_fu_611_p2 = ($signed(frac_din_cast_fu_602_p1) + $signed(9'd511));

assign trunc_ln181_1_fu_1114_p1 = conv_sign_exten_fu_1100_p3[8:0];

assign trunc_ln181_2_fu_1162_p1 = ashr_ln181_1_fu_1158_p2[8:0];

assign trunc_ln181_3_fu_1166_p1 = conv_sign_exten_1_fu_1152_p3[8:0];

assign trunc_ln181_fu_1110_p1 = ashr_ln181_fu_1106_p2[8:0];

assign trunc_ln96_1_fu_1389_p1 = conv_final_1_fu_1381_p3[6:0];

assign trunc_ln96_fu_1281_p1 = conv_final_fu_1273_p3[6:0];

assign weight_in_TREADY = regslice_both_weight_in_V_data_V_U_ack_in;

assign xor_ln184_1_fu_1355_p2 = (icmp_ln184_1_fu_1312_p2 ^ 1'd1);

assign xor_ln184_fu_1247_p2 = (icmp_ln184_fu_1204_p2 ^ 1'd1);

assign zext_ln82_1_fu_1409_p1 = conv_ch_in_lane_2_fu_1401_p3;

assign zext_ln82_fu_1301_p1 = conv_ch_in_lane_fu_1293_p3;

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= 1'b1;
    ap_int_blocking_n_reg <= 1'b1;
end

endmodule //coreConv
