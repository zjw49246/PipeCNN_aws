-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity coreConv is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    bias_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    bias_in_TVALID : IN STD_LOGIC;
    bias_in_TREADY : OUT STD_LOGIC;
    bias_in_TKEEP : IN STD_LOGIC_VECTOR (1 downto 0);
    bias_in_TSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
    bias_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    weight_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    weight_in_TVALID : IN STD_LOGIC;
    weight_in_TREADY : OUT STD_LOGIC;
    weight_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    weight_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    data_in_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in_TVALID : IN STD_LOGIC;
    data_in_TREADY : OUT STD_LOGIC;
    data_in_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_out_TVALID : OUT STD_LOGIC;
    conv_out_TREADY : IN STD_LOGIC;
    conv_out_TKEEP : OUT STD_LOGIC_VECTOR (1 downto 0);
    conv_out_TSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    conv_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of coreConv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "coreConv_coreConv,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2-i,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.291000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2879,HLS_SYN_LUT=2392,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_FFFFFF00 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111100000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal output_num : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_loop_cnt : STD_LOGIC_VECTOR (31 downto 0);
    signal contol : STD_LOGIC_VECTOR (31 downto 0);
    signal frac_w : STD_LOGIC_VECTOR (7 downto 0);
    signal frac_din : STD_LOGIC_VECTOR (7 downto 0);
    signal frac_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln101_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weight_in_TDATA_blk_n : STD_LOGIC;
    signal data_in_TDATA_blk_n : STD_LOGIC;
    signal conv_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln163_reg_1640 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_1640_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln163_reg_1640_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_39_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_40_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_41_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_42_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_43_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_45_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_46_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_47_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_48_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_49_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_fu_587_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_1513 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_583_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1519 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub113_fu_591_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub113_reg_1524 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub151_cast_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub151_cast_reg_1529 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_fu_643_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln101_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln101_reg_1541 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_1_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op90_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln101_reg_1552 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1552_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1552_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_1556 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_1556_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_1556_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mac_data_lane_fu_724_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_reg_1560 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_reg_1560_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_reg_1565 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_reg_1565_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_1_reg_1570 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_1_reg_1570_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_1_reg_1575 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_1_reg_1575_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_4_reg_1580 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_4_reg_1580_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_4_reg_1585 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_4_reg_1585_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_5_reg_1590 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_5_reg_1590_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_5_reg_1595 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_5_reg_1595_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln163_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_1640_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_1640_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_1640_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_1640_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bias_load_reg_1644 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_load_reg_1644_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_load_reg_1644_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_load_reg_1644_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_load_reg_1644_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_1_load_reg_1649 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_1_load_reg_1649_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_1_load_reg_1649_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_1_load_reg_1649_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_1_load_reg_1649_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_acc_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_acc_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal conv_acc_2_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_acc_2_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_3_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_3_reg_1684 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_8_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_8_reg_1689 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_acc_1_fu_1062_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_acc_1_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1699 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_acc_3_fu_1087_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_acc_3_reg_1704 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1709 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_with_rnd_bit_fu_1130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_with_rnd_bit_reg_1714 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_fu_1136_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln94_reg_1719 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_reg_1724 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_with_rnd_bit_1_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_with_rnd_bit_1_reg_1729 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln94_1_fu_1188_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln94_1_reg_1734 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_reg_1739 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter3_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_empty_38_phi_fu_418_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_38_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_38_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_38_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_38_reg_414 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_39_phi_fu_431_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_39_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_39_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_39_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_39_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_40_phi_fu_445_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_40_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_40_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_40_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_40_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_41_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_41_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_41_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_41_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_42_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_42_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_42_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_42_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_43_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_43_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_43_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_43_reg_482 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_44_phi_fu_500_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_44_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_44_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_44_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_44_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_45_phi_fu_513_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_45_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_45_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_45_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_45_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_empty_46_phi_fu_527_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_46_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_46_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_46_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_46_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_47_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_47_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_47_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_47_reg_536 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_48_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_48_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_48_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_48_reg_550 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_49_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_49_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_49_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_empty_49_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_inner_cnt_fu_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_inner_cnt_1_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal bias_fu_172 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_ch_out_lane_fu_689_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_1_fu_176 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sub113_fu_591_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal frac_w_cast38_fu_596_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frac_w_cast_fu_599_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frac_dout_cast39_fu_605_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frac_dout_cast_fu_608_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal frac_din_cast_fu_602_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_611_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_cast_fu_617_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal frac_w_cast_fu_599_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub150_fu_621_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal frac_dout_cast_fu_608_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub151_fu_627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shr_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal frac_w_cast38_fu_596_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal frac_dout_cast39_fu_605_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub174_fu_649_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub175_fu_655_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mac_data_lane_2_fu_752_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_2_fu_762_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_3_fu_772_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_3_fu_782_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_6_fu_832_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_6_fu_842_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_data_lane_7_fu_852_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal mac_weight_lane_7_fu_862_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal output_fu_932_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_fu_948_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_1_fu_964_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln55_4_fu_980_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1429_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1438_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln144_2_fu_993_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln144_2_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln144_1_fu_990_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1447_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_1456_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln144_5_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln144_6_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln144_4_fu_1008_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_2_fu_1026_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_7_fu_1038_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_fu_1050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_1_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_5_fu_1075_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln170_6_fu_1081_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln181_fu_1106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_sign_exten_fu_1100_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln181_1_fu_1114_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln181_fu_1110_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln181_fu_1118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln181_2_fu_1124_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ashr_ln181_1_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_sign_exten_1_fu_1152_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln181_3_fu_1166_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln181_2_fu_1162_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln181_1_fu_1170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln181_3_fu_1176_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln101cast_fu_1214_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ashr_ln192_fu_1217_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln192_fu_1226_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln192_2_fu_1222_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_sum_bias_fu_1231_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln184_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln184_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln186_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln186_fu_1267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln186_fu_1259_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp2_fu_1237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_final_fu_1273_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_1285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln96_fu_1281_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_ch_in_lane_fu_1293_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln82_fu_1301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln101cast34_fu_1322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ashr_ln192_1_fu_1325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln192_1_fu_1334_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln192_3_fu_1330_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_sum_bias_1_fu_1339_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln184_1_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln186_1_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln184_1_fu_1355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln186_1_fu_1361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln186_1_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln186_2_fu_1367_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal phitmp3_fu_1345_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_final_1_fu_1381_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_1393_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln96_1_fu_1389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_ch_in_lane_2_fu_1401_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln82_1_fu_1409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_ch_in_lane_3_fu_1413_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_ch_in_lane_1_fu_1305_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1429_ce : STD_LOGIC;
    signal grp_fu_1438_ce : STD_LOGIC;
    signal grp_fu_1447_ce : STD_LOGIC;
    signal grp_fu_1456_ce : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal regslice_both_conv_out_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_bias_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal bias_in_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal bias_in_TVALID_int_regslice : STD_LOGIC;
    signal bias_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_bias_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_bias_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal bias_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_bias_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_bias_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_bias_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal bias_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_bias_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_bias_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_bias_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal bias_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_bias_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_bias_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weight_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal weight_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal weight_in_TVALID_int_regslice : STD_LOGIC;
    signal weight_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_weight_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weight_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal weight_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_weight_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_weight_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weight_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal weight_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_weight_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_weight_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_weight_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal weight_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_weight_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_weight_in_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_in_V_data_V_U_apdone_blk : STD_LOGIC;
    signal data_in_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal data_in_TVALID_int_regslice : STD_LOGIC;
    signal data_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_data_in_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_in_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal data_in_TKEEP_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_data_in_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_data_in_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_in_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal data_in_TSTRB_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal regslice_both_data_in_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_data_in_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_in_V_last_V_U_apdone_blk : STD_LOGIC;
    signal data_in_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_data_in_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_data_in_V_last_V_U_ack_in : STD_LOGIC;
    signal conv_out_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_out_TVALID_int_regslice : STD_LOGIC;
    signal conv_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_conv_out_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_conv_out_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_conv_out_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_conv_out_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_conv_out_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_conv_out_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_conv_out_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_conv_out_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_conv_out_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_conv_out_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_258 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component coreConv_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component coreConv_mul_8s_8s_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component coreConv_mac_muladd_8s_8s_16s_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component coreConv_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_num : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_loop_cnt : OUT STD_LOGIC_VECTOR (31 downto 0);
        contol : OUT STD_LOGIC_VECTOR (31 downto 0);
        frac_w : OUT STD_LOGIC_VECTOR (7 downto 0);
        frac_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        frac_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component coreConv_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component coreConv_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_num => output_num,
        conv_loop_cnt => conv_loop_cnt,
        contol => contol,
        frac_w => frac_w,
        frac_din => frac_din,
        frac_dout => frac_dout,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    mul_32s_32s_32_2_1_U1 : component coreConv_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_loop_cnt,
        din1 => output_num,
        ce => ap_const_logic_1,
        dout => grp_fu_583_p2);

    mul_8s_8s_16_1_1_U2 : component coreConv_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mac_weight_lane_reg_1565_pp0_iter1_reg,
        din1 => mac_data_lane_reg_1560_pp0_iter1_reg,
        dout => output_fu_932_p2);

    mul_8s_8s_16_1_1_U3 : component coreConv_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mac_weight_lane_1_reg_1575_pp0_iter1_reg,
        din1 => mac_data_lane_1_reg_1570_pp0_iter1_reg,
        dout => mul_ln55_fu_948_p2);

    mul_8s_8s_16_1_1_U4 : component coreConv_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mac_weight_lane_4_reg_1585_pp0_iter1_reg,
        din1 => mac_data_lane_4_reg_1580_pp0_iter1_reg,
        dout => output_1_fu_964_p2);

    mul_8s_8s_16_1_1_U5 : component coreConv_mul_8s_8s_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mac_weight_lane_5_reg_1595_pp0_iter1_reg,
        din1 => mac_data_lane_5_reg_1590_pp0_iter1_reg,
        dout => mul_ln55_4_fu_980_p2);

    mac_muladd_8s_8s_16s_17_4_1_U6 : component coreConv_mac_muladd_8s_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mac_weight_lane_2_fu_762_p4,
        din1 => mac_data_lane_2_fu_752_p4,
        din2 => mul_ln55_fu_948_p2,
        ce => grp_fu_1429_ce,
        dout => grp_fu_1429_p3);

    mac_muladd_8s_8s_16s_17_4_1_U7 : component coreConv_mac_muladd_8s_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mac_weight_lane_3_fu_782_p4,
        din1 => mac_data_lane_3_fu_772_p4,
        din2 => output_fu_932_p2,
        ce => grp_fu_1438_ce,
        dout => grp_fu_1438_p3);

    mac_muladd_8s_8s_16s_17_4_1_U8 : component coreConv_mac_muladd_8s_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mac_weight_lane_6_fu_842_p4,
        din1 => mac_data_lane_6_fu_832_p4,
        din2 => mul_ln55_4_fu_980_p2,
        ce => grp_fu_1447_ce,
        dout => grp_fu_1447_p3);

    mac_muladd_8s_8s_16s_17_4_1_U9 : component coreConv_mac_muladd_8s_8s_16s_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mac_weight_lane_7_fu_862_p4,
        din1 => mac_data_lane_7_fu_852_p4,
        din2 => output_1_fu_964_p2,
        ce => grp_fu_1456_ce,
        dout => grp_fu_1456_p3);

    regslice_both_bias_in_V_data_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => bias_in_TDATA,
        vld_in => bias_in_TVALID,
        ack_in => regslice_both_bias_in_V_data_V_U_ack_in,
        data_out => bias_in_TDATA_int_regslice,
        vld_out => bias_in_TVALID_int_regslice,
        ack_out => bias_in_TREADY_int_regslice,
        apdone_blk => regslice_both_bias_in_V_data_V_U_apdone_blk);

    regslice_both_bias_in_V_keep_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => bias_in_TKEEP,
        vld_in => bias_in_TVALID,
        ack_in => regslice_both_bias_in_V_keep_V_U_ack_in,
        data_out => bias_in_TKEEP_int_regslice,
        vld_out => regslice_both_bias_in_V_keep_V_U_vld_out,
        ack_out => bias_in_TREADY_int_regslice,
        apdone_blk => regslice_both_bias_in_V_keep_V_U_apdone_blk);

    regslice_both_bias_in_V_strb_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => bias_in_TSTRB,
        vld_in => bias_in_TVALID,
        ack_in => regslice_both_bias_in_V_strb_V_U_ack_in,
        data_out => bias_in_TSTRB_int_regslice,
        vld_out => regslice_both_bias_in_V_strb_V_U_vld_out,
        ack_out => bias_in_TREADY_int_regslice,
        apdone_blk => regslice_both_bias_in_V_strb_V_U_apdone_blk);

    regslice_both_bias_in_V_last_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => bias_in_TLAST,
        vld_in => bias_in_TVALID,
        ack_in => regslice_both_bias_in_V_last_V_U_ack_in,
        data_out => bias_in_TLAST_int_regslice,
        vld_out => regslice_both_bias_in_V_last_V_U_vld_out,
        ack_out => bias_in_TREADY_int_regslice,
        apdone_blk => regslice_both_bias_in_V_last_V_U_apdone_blk);

    regslice_both_weight_in_V_data_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TDATA,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_weight_in_V_data_V_U_ack_in,
        data_out => weight_in_TDATA_int_regslice,
        vld_out => weight_in_TVALID_int_regslice,
        ack_out => weight_in_TREADY_int_regslice,
        apdone_blk => regslice_both_weight_in_V_data_V_U_apdone_blk);

    regslice_both_weight_in_V_keep_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TKEEP,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_weight_in_V_keep_V_U_ack_in,
        data_out => weight_in_TKEEP_int_regslice,
        vld_out => regslice_both_weight_in_V_keep_V_U_vld_out,
        ack_out => weight_in_TREADY_int_regslice,
        apdone_blk => regslice_both_weight_in_V_keep_V_U_apdone_blk);

    regslice_both_weight_in_V_strb_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TSTRB,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_weight_in_V_strb_V_U_ack_in,
        data_out => weight_in_TSTRB_int_regslice,
        vld_out => regslice_both_weight_in_V_strb_V_U_vld_out,
        ack_out => weight_in_TREADY_int_regslice,
        apdone_blk => regslice_both_weight_in_V_strb_V_U_apdone_blk);

    regslice_both_weight_in_V_last_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => weight_in_TLAST,
        vld_in => weight_in_TVALID,
        ack_in => regslice_both_weight_in_V_last_V_U_ack_in,
        data_out => weight_in_TLAST_int_regslice,
        vld_out => regslice_both_weight_in_V_last_V_U_vld_out,
        ack_out => weight_in_TREADY_int_regslice,
        apdone_blk => regslice_both_weight_in_V_last_V_U_apdone_blk);

    regslice_both_data_in_V_data_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TDATA,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_data_in_V_data_V_U_ack_in,
        data_out => data_in_TDATA_int_regslice,
        vld_out => data_in_TVALID_int_regslice,
        ack_out => data_in_TREADY_int_regslice,
        apdone_blk => regslice_both_data_in_V_data_V_U_apdone_blk);

    regslice_both_data_in_V_keep_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TKEEP,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_data_in_V_keep_V_U_ack_in,
        data_out => data_in_TKEEP_int_regslice,
        vld_out => regslice_both_data_in_V_keep_V_U_vld_out,
        ack_out => data_in_TREADY_int_regslice,
        apdone_blk => regslice_both_data_in_V_keep_V_U_apdone_blk);

    regslice_both_data_in_V_strb_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TSTRB,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_data_in_V_strb_V_U_ack_in,
        data_out => data_in_TSTRB_int_regslice,
        vld_out => regslice_both_data_in_V_strb_V_U_vld_out,
        ack_out => data_in_TREADY_int_regslice,
        apdone_blk => regslice_both_data_in_V_strb_V_U_apdone_blk);

    regslice_both_data_in_V_last_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => data_in_TLAST,
        vld_in => data_in_TVALID,
        ack_in => regslice_both_data_in_V_last_V_U_ack_in,
        data_out => data_in_TLAST_int_regslice,
        vld_out => regslice_both_data_in_V_last_V_U_vld_out,
        ack_out => data_in_TREADY_int_regslice,
        apdone_blk => regslice_both_data_in_V_last_V_U_apdone_blk);

    regslice_both_conv_out_V_data_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => conv_out_TDATA_int_regslice,
        vld_in => conv_out_TVALID_int_regslice,
        ack_in => conv_out_TREADY_int_regslice,
        data_out => conv_out_TDATA,
        vld_out => regslice_both_conv_out_V_data_V_U_vld_out,
        ack_out => conv_out_TREADY,
        apdone_blk => regslice_both_conv_out_V_data_V_U_apdone_blk);

    regslice_both_conv_out_V_keep_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => conv_out_TVALID_int_regslice,
        ack_in => regslice_both_conv_out_V_keep_V_U_ack_in_dummy,
        data_out => conv_out_TKEEP,
        vld_out => regslice_both_conv_out_V_keep_V_U_vld_out,
        ack_out => conv_out_TREADY,
        apdone_blk => regslice_both_conv_out_V_keep_V_U_apdone_blk);

    regslice_both_conv_out_V_strb_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv2_0,
        vld_in => conv_out_TVALID_int_regslice,
        ack_in => regslice_both_conv_out_V_strb_V_U_ack_in_dummy,
        data_out => conv_out_TSTRB,
        vld_out => regslice_both_conv_out_V_strb_V_U_vld_out,
        ack_out => conv_out_TREADY,
        apdone_blk => regslice_both_conv_out_V_strb_V_U_apdone_blk);

    regslice_both_conv_out_V_last_V_U : component coreConv_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => conv_out_TVALID_int_regslice,
        ack_in => regslice_both_conv_out_V_last_V_U_ack_in_dummy,
        data_out => conv_out_TLAST,
        vld_out => regslice_both_conv_out_V_last_V_U_vld_out,
        ack_out => conv_out_TREADY,
        apdone_blk => regslice_both_conv_out_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (regslice_both_conv_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter3_state7)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter2;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_38_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_38_reg_414 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_38_reg_414 <= ap_phi_reg_pp0_iter0_empty_38_reg_414;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_39_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_39_reg_426 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_39_reg_426 <= ap_phi_reg_pp0_iter0_empty_39_reg_426;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_40_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_40_reg_440 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_40_reg_440 <= ap_phi_reg_pp0_iter0_empty_40_reg_440;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_41_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_41_reg_454 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_41_reg_454 <= ap_phi_reg_pp0_iter0_empty_41_reg_454;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_42_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_42_reg_468 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_42_reg_468 <= ap_phi_reg_pp0_iter0_empty_42_reg_468;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_43_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_43_reg_482 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_43_reg_482 <= ap_phi_reg_pp0_iter0_empty_43_reg_482;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_44_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_44_reg_496 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_44_reg_496 <= ap_phi_reg_pp0_iter0_empty_44_reg_496;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_45_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_45_reg_508 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_45_reg_508 <= ap_phi_reg_pp0_iter0_empty_45_reg_508;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_46_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_46_reg_522 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_46_reg_522 <= ap_phi_reg_pp0_iter0_empty_46_reg_522;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_47_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_47_reg_536 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_47_reg_536 <= ap_phi_reg_pp0_iter0_empty_47_reg_536;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_48_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_48_reg_550 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_48_reg_550 <= ap_phi_reg_pp0_iter0_empty_48_reg_550;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_49_reg_564_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_258)) then
                if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_49_reg_564 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_49_reg_564 <= ap_phi_reg_pp0_iter0_empty_49_reg_564;
                end if;
            end if; 
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;

    conv_inner_cnt_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln163_fu_904_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                conv_inner_cnt_fu_168 <= ap_const_lv32_0;
            elsif (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln163_fu_904_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_inner_cnt_fu_168 <= conv_inner_cnt_1_fu_909_p2;
            end if; 
        end if;
    end process;

    empty_39_reg_426_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_39_reg_426 <= empty_40_reg_440;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_39_reg_426 <= ap_phi_reg_pp0_iter3_empty_39_reg_426;
                end if;
            end if; 
        end if;
    end process;

    empty_40_reg_440_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_40_reg_440 <= empty_41_reg_454;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_40_reg_440 <= ap_phi_reg_pp0_iter3_empty_40_reg_440;
                end if;
            end if; 
        end if;
    end process;

    empty_41_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_41_reg_454 <= empty_42_reg_468;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_41_reg_454 <= ap_phi_reg_pp0_iter3_empty_41_reg_454;
                end if;
            end if; 
        end if;
    end process;

    empty_42_reg_468_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_42_reg_468 <= empty_43_reg_482;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_42_reg_468 <= ap_phi_reg_pp0_iter3_empty_42_reg_468;
                end if;
            end if; 
        end if;
    end process;

    empty_43_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_43_reg_482 <= conv_acc_2_reg_1679;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_43_reg_482 <= ap_phi_reg_pp0_iter3_empty_43_reg_482;
                end if;
            end if; 
        end if;
    end process;

    empty_45_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_45_reg_508 <= empty_46_reg_522;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_45_reg_508 <= ap_phi_reg_pp0_iter3_empty_45_reg_508;
                end if;
            end if; 
        end if;
    end process;

    empty_46_reg_522_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_46_reg_522 <= empty_47_reg_536;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_46_reg_522 <= ap_phi_reg_pp0_iter3_empty_46_reg_522;
                end if;
            end if; 
        end if;
    end process;

    empty_47_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_47_reg_536 <= empty_48_reg_550;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_47_reg_536 <= ap_phi_reg_pp0_iter3_empty_47_reg_536;
                end if;
            end if; 
        end if;
    end process;

    empty_48_reg_550_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_48_reg_550 <= empty_49_reg_564;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_48_reg_550 <= ap_phi_reg_pp0_iter3_empty_48_reg_550;
                end if;
            end if; 
        end if;
    end process;

    empty_49_reg_564_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
                    empty_49_reg_564 <= conv_acc_reg_1674;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    empty_49_reg_564 <= ap_phi_reg_pp0_iter3_empty_49_reg_564;
                end if;
            end if; 
        end if;
    end process;

    k_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_reg_271 <= k_1_fu_665_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                k_reg_271 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln163_reg_1640_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then
                add_ln170_3_reg_1684 <= add_ln170_3_fu_1032_p2;
                add_ln170_8_reg_1689 <= add_ln170_8_fu_1044_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln163_reg_1640_pp0_iter4_reg = ap_const_lv1_1))) then
                add_ln94_1_reg_1734 <= add_ln94_1_fu_1188_p2;
                add_ln94_reg_1719 <= add_ln94_fu_1136_p2;
                conv_with_rnd_bit_1_reg_1729 <= conv_with_rnd_bit_1_fu_1182_p2;
                conv_with_rnd_bit_reg_1714 <= conv_with_rnd_bit_fu_1130_p2;
                tmp_2_reg_1724 <= conv_with_rnd_bit_fu_1130_p2(31 downto 8);
                tmp_5_reg_1739 <= conv_with_rnd_bit_1_fu_1182_p2(31 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_empty_38_reg_414 <= ap_phi_reg_pp0_iter1_empty_38_reg_414;
                ap_phi_reg_pp0_iter2_empty_39_reg_426 <= ap_phi_reg_pp0_iter1_empty_39_reg_426;
                ap_phi_reg_pp0_iter2_empty_40_reg_440 <= ap_phi_reg_pp0_iter1_empty_40_reg_440;
                ap_phi_reg_pp0_iter2_empty_41_reg_454 <= ap_phi_reg_pp0_iter1_empty_41_reg_454;
                ap_phi_reg_pp0_iter2_empty_42_reg_468 <= ap_phi_reg_pp0_iter1_empty_42_reg_468;
                ap_phi_reg_pp0_iter2_empty_43_reg_482 <= ap_phi_reg_pp0_iter1_empty_43_reg_482;
                ap_phi_reg_pp0_iter2_empty_44_reg_496 <= ap_phi_reg_pp0_iter1_empty_44_reg_496;
                ap_phi_reg_pp0_iter2_empty_45_reg_508 <= ap_phi_reg_pp0_iter1_empty_45_reg_508;
                ap_phi_reg_pp0_iter2_empty_46_reg_522 <= ap_phi_reg_pp0_iter1_empty_46_reg_522;
                ap_phi_reg_pp0_iter2_empty_47_reg_536 <= ap_phi_reg_pp0_iter1_empty_47_reg_536;
                ap_phi_reg_pp0_iter2_empty_48_reg_550 <= ap_phi_reg_pp0_iter1_empty_48_reg_550;
                ap_phi_reg_pp0_iter2_empty_49_reg_564 <= ap_phi_reg_pp0_iter1_empty_49_reg_564;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_empty_38_reg_414 <= ap_phi_reg_pp0_iter2_empty_38_reg_414;
                ap_phi_reg_pp0_iter3_empty_39_reg_426 <= ap_phi_reg_pp0_iter2_empty_39_reg_426;
                ap_phi_reg_pp0_iter3_empty_40_reg_440 <= ap_phi_reg_pp0_iter2_empty_40_reg_440;
                ap_phi_reg_pp0_iter3_empty_41_reg_454 <= ap_phi_reg_pp0_iter2_empty_41_reg_454;
                ap_phi_reg_pp0_iter3_empty_42_reg_468 <= ap_phi_reg_pp0_iter2_empty_42_reg_468;
                ap_phi_reg_pp0_iter3_empty_43_reg_482 <= ap_phi_reg_pp0_iter2_empty_43_reg_482;
                ap_phi_reg_pp0_iter3_empty_44_reg_496 <= ap_phi_reg_pp0_iter2_empty_44_reg_496;
                ap_phi_reg_pp0_iter3_empty_45_reg_508 <= ap_phi_reg_pp0_iter2_empty_45_reg_508;
                ap_phi_reg_pp0_iter3_empty_46_reg_522 <= ap_phi_reg_pp0_iter2_empty_46_reg_522;
                ap_phi_reg_pp0_iter3_empty_47_reg_536 <= ap_phi_reg_pp0_iter2_empty_47_reg_536;
                ap_phi_reg_pp0_iter3_empty_48_reg_550 <= ap_phi_reg_pp0_iter2_empty_48_reg_550;
                ap_phi_reg_pp0_iter3_empty_49_reg_564 <= ap_phi_reg_pp0_iter2_empty_49_reg_564;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bias_1_fu_176 <= bias_in_TDATA_int_regslice(15 downto 8);
                bias_fu_172 <= bias_ch_out_lane_fu_689_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln163_reg_1640 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln101_reg_1552 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bias_1_load_reg_1649 <= bias_1_fu_176;
                bias_load_reg_1644 <= bias_fu_172;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bias_1_load_reg_1649_pp0_iter2_reg <= bias_1_load_reg_1649;
                bias_1_load_reg_1649_pp0_iter3_reg <= bias_1_load_reg_1649_pp0_iter2_reg;
                bias_1_load_reg_1649_pp0_iter4_reg <= bias_1_load_reg_1649_pp0_iter3_reg;
                bias_1_load_reg_1649_pp0_iter5_reg <= bias_1_load_reg_1649_pp0_iter4_reg;
                bias_load_reg_1644_pp0_iter2_reg <= bias_load_reg_1644;
                bias_load_reg_1644_pp0_iter3_reg <= bias_load_reg_1644_pp0_iter2_reg;
                bias_load_reg_1644_pp0_iter4_reg <= bias_load_reg_1644_pp0_iter3_reg;
                bias_load_reg_1644_pp0_iter5_reg <= bias_load_reg_1644_pp0_iter4_reg;
                icmp_ln101_reg_1552_pp0_iter2_reg <= icmp_ln101_reg_1552_pp0_iter1_reg;
                icmp_ln104_reg_1556_pp0_iter2_reg <= icmp_ln104_reg_1556_pp0_iter1_reg;
                icmp_ln163_reg_1640_pp0_iter2_reg <= icmp_ln163_reg_1640_pp0_iter1_reg;
                icmp_ln163_reg_1640_pp0_iter3_reg <= icmp_ln163_reg_1640_pp0_iter2_reg;
                icmp_ln163_reg_1640_pp0_iter4_reg <= icmp_ln163_reg_1640_pp0_iter3_reg;
                icmp_ln163_reg_1640_pp0_iter5_reg <= icmp_ln163_reg_1640_pp0_iter4_reg;
                icmp_ln163_reg_1640_pp0_iter6_reg <= icmp_ln163_reg_1640_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln163_reg_1640_pp0_iter3_reg = ap_const_lv1_1))) then
                conv_acc_1_reg_1694 <= conv_acc_1_fu_1062_p2;
                conv_acc_3_reg_1704 <= conv_acc_3_fu_1087_p2;
                tmp_1_reg_1699 <= conv_acc_1_fu_1062_p2(31 downto 31);
                tmp_4_reg_1709 <= conv_acc_3_fu_1087_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then
                conv_acc_2_reg_1679 <= conv_acc_2_fu_1020_p2;
                conv_acc_reg_1674 <= conv_acc_fu_1002_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_reg_1513 <= empty_fu_587_p1;
                mul_reg_1519 <= grp_fu_583_p2;
                neg_reg_1535 <= neg_fu_643_p2;
                sext_ln101_reg_1541 <= sext_ln101_fu_661_p1;
                sub113_reg_1524 <= sub113_fu_591_p2;
                sub151_cast_reg_1529 <= sub151_cast_fu_633_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln101_reg_1552 <= icmp_ln101_fu_671_p2;
                icmp_ln101_reg_1552_pp0_iter1_reg <= icmp_ln101_reg_1552;
                icmp_ln104_reg_1556_pp0_iter1_reg <= icmp_ln104_reg_1556;
                icmp_ln163_reg_1640_pp0_iter1_reg <= icmp_ln163_reg_1640;
                mac_data_lane_1_reg_1570_pp0_iter1_reg <= mac_data_lane_1_reg_1570;
                mac_data_lane_4_reg_1580_pp0_iter1_reg <= mac_data_lane_4_reg_1580;
                mac_data_lane_5_reg_1590_pp0_iter1_reg <= mac_data_lane_5_reg_1590;
                mac_data_lane_reg_1560_pp0_iter1_reg <= mac_data_lane_reg_1560;
                mac_weight_lane_1_reg_1575_pp0_iter1_reg <= mac_weight_lane_1_reg_1575;
                mac_weight_lane_4_reg_1585_pp0_iter1_reg <= mac_weight_lane_4_reg_1585;
                mac_weight_lane_5_reg_1595_pp0_iter1_reg <= mac_weight_lane_5_reg_1595;
                mac_weight_lane_reg_1565_pp0_iter1_reg <= mac_weight_lane_reg_1565;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln104_reg_1556 <= icmp_ln104_fu_679_p2;
                icmp_ln163_reg_1640 <= icmp_ln163_fu_904_p2;
                mac_data_lane_1_reg_1570 <= data_in_TDATA_int_regslice(15 downto 8);
                mac_data_lane_4_reg_1580 <= data_in_TDATA_int_regslice(39 downto 32);
                mac_data_lane_5_reg_1590 <= data_in_TDATA_int_regslice(47 downto 40);
                mac_data_lane_reg_1560 <= mac_data_lane_fu_724_p1;
                mac_weight_lane_1_reg_1575 <= weight_in_TDATA_int_regslice(15 downto 8);
                mac_weight_lane_4_reg_1585 <= weight_in_TDATA_int_regslice(39 downto 32);
                mac_weight_lane_5_reg_1595 <= weight_in_TDATA_int_regslice(47 downto 40);
                mac_weight_lane_reg_1565 <= mac_weight_lane_fu_728_p1;
            end if;
        end if;
    end process;
    ap_ext_blocking_n_reg <= '1';
    ap_int_blocking_n_reg <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_CS_fsm_state12, regslice_both_conv_out_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (regslice_both_conv_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln144_2_fu_996_p2 <= std_logic_vector(signed(sext_ln144_2_fu_993_p1) + signed(ap_phi_mux_empty_44_phi_fu_500_p4));
    add_ln144_6_fu_1014_p2 <= std_logic_vector(signed(sext_ln144_5_fu_1011_p1) + signed(ap_phi_mux_empty_38_phi_fu_418_p4));
    add_ln170_1_fu_1056_p2 <= std_logic_vector(unsigned(add_ln170_fu_1050_p2) + unsigned(empty_48_reg_550));
    add_ln170_2_fu_1026_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_46_phi_fu_527_p4) + unsigned(conv_acc_fu_1002_p2));
    add_ln170_3_fu_1032_p2 <= std_logic_vector(unsigned(add_ln170_2_fu_1026_p2) + unsigned(ap_phi_mux_empty_45_phi_fu_513_p4));
    add_ln170_5_fu_1075_p2 <= std_logic_vector(unsigned(empty_43_reg_482) + unsigned(empty_41_reg_454));
    add_ln170_6_fu_1081_p2 <= std_logic_vector(unsigned(add_ln170_5_fu_1075_p2) + unsigned(empty_42_reg_468));
    add_ln170_7_fu_1038_p2 <= std_logic_vector(unsigned(ap_phi_mux_empty_40_phi_fu_445_p4) + unsigned(conv_acc_2_fu_1020_p2));
    add_ln170_8_fu_1044_p2 <= std_logic_vector(unsigned(add_ln170_7_fu_1038_p2) + unsigned(ap_phi_mux_empty_39_phi_fu_431_p4));
    add_ln170_fu_1050_p2 <= std_logic_vector(unsigned(empty_49_reg_564) + unsigned(empty_47_reg_536));
    add_ln94_1_fu_1188_p2 <= std_logic_vector(unsigned(or_ln181_3_fu_1176_p2) + unsigned(ap_const_lv9_1));
    add_ln94_fu_1136_p2 <= std_logic_vector(unsigned(or_ln181_2_fu_1124_p2) + unsigned(ap_const_lv9_1));
    and_ln186_1_fu_1361_p2 <= (xor_ln184_1_fu_1355_p2 and icmp_ln186_1_fu_1317_p2);
    and_ln186_fu_1253_p2 <= (xor_ln184_fu_1247_p2 and icmp_ln186_fu_1209_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln101_fu_671_p2, ap_enable_reg_pp0_iter6, icmp_ln163_reg_1640_pp0_iter5_reg, ap_enable_reg_pp0_iter7, icmp_ln163_reg_1640_pp0_iter6_reg, ap_predicate_op90_read_state4, bias_in_TVALID_int_regslice, weight_in_TVALID_int_regslice, data_in_TVALID_int_regslice, conv_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln163_reg_1640_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (data_in_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (weight_in_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op90_read_state4 = ap_const_boolean_1) and (bias_in_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln101_fu_671_p2, ap_enable_reg_pp0_iter6, icmp_ln163_reg_1640_pp0_iter5_reg, ap_enable_reg_pp0_iter7, icmp_ln163_reg_1640_pp0_iter6_reg, ap_predicate_op90_read_state4, ap_block_state10_io, ap_block_state11_io, bias_in_TVALID_int_regslice, weight_in_TVALID_int_regslice, data_in_TVALID_int_regslice, conv_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((icmp_ln163_reg_1640_pp0_iter6_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (data_in_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (weight_in_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op90_read_state4 = ap_const_boolean_1) and (bias_in_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln101_fu_671_p2, ap_enable_reg_pp0_iter6, icmp_ln163_reg_1640_pp0_iter5_reg, ap_enable_reg_pp0_iter7, icmp_ln163_reg_1640_pp0_iter6_reg, ap_predicate_op90_read_state4, ap_block_state10_io, ap_block_state11_io, bias_in_TVALID_int_regslice, weight_in_TVALID_int_regslice, data_in_TVALID_int_regslice, conv_out_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or ((icmp_ln163_reg_1640_pp0_iter6_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or ((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (data_in_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (weight_in_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op90_read_state4 = ap_const_boolean_1) and (bias_in_TVALID_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state10_io_assign_proc : process(icmp_ln163_reg_1640_pp0_iter5_reg, conv_out_TREADY_int_regslice)
    begin
                ap_block_state10_io <= ((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter6_assign_proc : process(icmp_ln163_reg_1640_pp0_iter5_reg, conv_out_TREADY_int_regslice)
    begin
                ap_block_state10_pp0_stage0_iter6 <= ((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(icmp_ln163_reg_1640_pp0_iter6_reg, conv_out_TREADY_int_regslice)
    begin
                ap_block_state11_io <= ((icmp_ln163_reg_1640_pp0_iter6_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter7_assign_proc : process(icmp_ln163_reg_1640_pp0_iter6_reg, conv_out_TREADY_int_regslice)
    begin
                ap_block_state11_pp0_stage0_iter7 <= ((icmp_ln163_reg_1640_pp0_iter6_reg = ap_const_lv1_1) and (conv_out_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter0_assign_proc : process(icmp_ln101_fu_671_p2, ap_predicate_op90_read_state4, bias_in_TVALID_int_regslice, weight_in_TVALID_int_regslice, data_in_TVALID_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter0 <= (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (data_in_TVALID_int_regslice = ap_const_logic_0)) or ((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (weight_in_TVALID_int_regslice = ap_const_logic_0)) or ((ap_predicate_op90_read_state4 = ap_const_boolean_1) and (bias_in_TVALID_int_regslice = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_258_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_258 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter3_state7_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter3_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter3_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln101_fu_671_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln101_fu_671_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state12, regslice_both_conv_out_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (regslice_both_conv_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_phi_mux_empty_38_phi_fu_418_p4_assign_proc : process(empty_39_reg_426, icmp_ln101_reg_1552_pp0_iter2_reg, icmp_ln104_reg_1556_pp0_iter2_reg, ap_phi_reg_pp0_iter3_empty_38_reg_414)
    begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_38_phi_fu_418_p4 <= empty_39_reg_426;
        else 
            ap_phi_mux_empty_38_phi_fu_418_p4 <= ap_phi_reg_pp0_iter3_empty_38_reg_414;
        end if; 
    end process;


    ap_phi_mux_empty_39_phi_fu_431_p4_assign_proc : process(empty_40_reg_440, icmp_ln101_reg_1552_pp0_iter2_reg, icmp_ln104_reg_1556_pp0_iter2_reg, ap_phi_reg_pp0_iter3_empty_39_reg_426)
    begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_39_phi_fu_431_p4 <= empty_40_reg_440;
        else 
            ap_phi_mux_empty_39_phi_fu_431_p4 <= ap_phi_reg_pp0_iter3_empty_39_reg_426;
        end if; 
    end process;


    ap_phi_mux_empty_40_phi_fu_445_p4_assign_proc : process(empty_41_reg_454, icmp_ln101_reg_1552_pp0_iter2_reg, icmp_ln104_reg_1556_pp0_iter2_reg, ap_phi_reg_pp0_iter3_empty_40_reg_440)
    begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_40_phi_fu_445_p4 <= empty_41_reg_454;
        else 
            ap_phi_mux_empty_40_phi_fu_445_p4 <= ap_phi_reg_pp0_iter3_empty_40_reg_440;
        end if; 
    end process;


    ap_phi_mux_empty_44_phi_fu_500_p4_assign_proc : process(empty_45_reg_508, icmp_ln101_reg_1552_pp0_iter2_reg, icmp_ln104_reg_1556_pp0_iter2_reg, ap_phi_reg_pp0_iter3_empty_44_reg_496)
    begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_44_phi_fu_500_p4 <= empty_45_reg_508;
        else 
            ap_phi_mux_empty_44_phi_fu_500_p4 <= ap_phi_reg_pp0_iter3_empty_44_reg_496;
        end if; 
    end process;


    ap_phi_mux_empty_45_phi_fu_513_p4_assign_proc : process(empty_46_reg_522, icmp_ln101_reg_1552_pp0_iter2_reg, icmp_ln104_reg_1556_pp0_iter2_reg, ap_phi_reg_pp0_iter3_empty_45_reg_508)
    begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_45_phi_fu_513_p4 <= empty_46_reg_522;
        else 
            ap_phi_mux_empty_45_phi_fu_513_p4 <= ap_phi_reg_pp0_iter3_empty_45_reg_508;
        end if; 
    end process;


    ap_phi_mux_empty_46_phi_fu_527_p4_assign_proc : process(empty_47_reg_536, icmp_ln101_reg_1552_pp0_iter2_reg, icmp_ln104_reg_1556_pp0_iter2_reg, ap_phi_reg_pp0_iter3_empty_46_reg_522)
    begin
        if (((icmp_ln104_reg_1556_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln101_reg_1552_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_empty_46_phi_fu_527_p4 <= empty_47_reg_536;
        else 
            ap_phi_mux_empty_46_phi_fu_527_p4 <= ap_phi_reg_pp0_iter3_empty_46_reg_522;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_38_reg_414 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_39_reg_426 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_40_reg_440 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_41_reg_454 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_42_reg_468 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_43_reg_482 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_44_reg_496 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_45_reg_508 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_46_reg_522 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_47_reg_536 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_48_reg_550 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_49_reg_564 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op90_read_state4_assign_proc : process(icmp_ln101_fu_671_p2, icmp_ln104_fu_679_p2)
    begin
                ap_predicate_op90_read_state4 <= ((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, regslice_both_conv_out_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (regslice_both_conv_out_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_cur_n <= (weight_in_TDATA_blk_n and data_in_TDATA_blk_n and conv_out_TDATA_blk_n and bias_in_TDATA_blk_n);
    ap_str_blocking_n <= (ap_str_blocking_cur_n and ap_const_logic_1);
    ashr_ln181_1_fu_1158_p2 <= std_logic_vector(shift_right(signed(conv_acc_3_reg_1704),to_integer(unsigned('0' & sub151_cast_reg_1529(31-1 downto 0)))));
    ashr_ln181_fu_1106_p2 <= std_logic_vector(shift_right(signed(conv_acc_1_reg_1694),to_integer(unsigned('0' & sub151_cast_reg_1529(31-1 downto 0)))));
    ashr_ln192_1_fu_1325_p2 <= std_logic_vector(shift_right(signed(bias_1_load_reg_1649_pp0_iter5_reg),to_integer(unsigned('0' & sext_ln101cast34_fu_1322_p1(8-1 downto 0)))));
    ashr_ln192_fu_1217_p2 <= std_logic_vector(shift_right(signed(bias_load_reg_1644_pp0_iter5_reg),to_integer(unsigned('0' & sext_ln101cast_fu_1214_p1(8-1 downto 0)))));
    bias_ch_out_lane_fu_689_p1 <= bias_in_TDATA_int_regslice(8 - 1 downto 0);

    bias_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln101_fu_671_p2, icmp_ln104_fu_679_p2, bias_in_TVALID_int_regslice)
    begin
        if (((icmp_ln104_fu_679_p2 = ap_const_lv1_1) and (icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_in_TDATA_blk_n <= bias_in_TVALID_int_regslice;
        else 
            bias_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    bias_in_TREADY <= regslice_both_bias_in_V_data_V_U_ack_in;

    bias_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op90_read_state4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op90_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bias_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            bias_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    conv_acc_1_fu_1062_p2 <= std_logic_vector(unsigned(add_ln170_3_reg_1684) + unsigned(add_ln170_1_fu_1056_p2));
    conv_acc_2_fu_1020_p2 <= std_logic_vector(unsigned(add_ln144_6_fu_1014_p2) + unsigned(sext_ln144_4_fu_1008_p1));
    conv_acc_3_fu_1087_p2 <= std_logic_vector(unsigned(add_ln170_8_reg_1689) + unsigned(add_ln170_6_fu_1081_p2));
    conv_acc_fu_1002_p2 <= std_logic_vector(unsigned(add_ln144_2_fu_996_p2) + unsigned(sext_ln144_1_fu_990_p1));
    conv_ch_in_lane_1_fu_1305_p3 <= 
        zext_ln82_fu_1301_p1 when (empty_reg_1513(0) = '1') else 
        conv_final_fu_1273_p3;
    conv_ch_in_lane_2_fu_1401_p3 <= 
        ap_const_lv7_0 when (tmp_6_fu_1393_p3(0) = '1') else 
        trunc_ln96_1_fu_1389_p1;
    conv_ch_in_lane_3_fu_1413_p3 <= 
        zext_ln82_1_fu_1409_p1 when (empty_reg_1513(0) = '1') else 
        conv_final_1_fu_1381_p3;
    conv_ch_in_lane_fu_1293_p3 <= 
        ap_const_lv7_0 when (tmp_3_fu_1285_p3(0) = '1') else 
        trunc_ln96_fu_1281_p1;
    conv_final_1_fu_1381_p3 <= 
        select_ln186_2_fu_1367_p3 when (or_ln186_1_fu_1375_p2(0) = '1') else 
        phitmp3_fu_1345_p4;
    conv_final_fu_1273_p3 <= 
        select_ln186_fu_1259_p3 when (or_ln186_fu_1267_p2(0) = '1') else 
        phitmp2_fu_1237_p4;
    conv_inner_cnt_1_fu_909_p2 <= std_logic_vector(unsigned(conv_inner_cnt_fu_168) + unsigned(ap_const_lv32_1));

    conv_out_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, icmp_ln163_reg_1640_pp0_iter5_reg, ap_enable_reg_pp0_iter7, icmp_ln163_reg_1640_pp0_iter6_reg, conv_out_TREADY_int_regslice)
    begin
        if ((((icmp_ln163_reg_1640_pp0_iter6_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            conv_out_TDATA_blk_n <= conv_out_TREADY_int_regslice;
        else 
            conv_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    conv_out_TDATA_int_regslice <= (conv_ch_in_lane_3_fu_1413_p3 & conv_ch_in_lane_1_fu_1305_p3);
    conv_out_TVALID <= regslice_both_conv_out_V_data_V_U_vld_out;

    conv_out_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter6, icmp_ln163_reg_1640_pp0_iter5_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln163_reg_1640_pp0_iter5_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_out_TVALID_int_regslice <= ap_const_logic_1;
        else 
            conv_out_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    conv_sign_exten_1_fu_1152_p3 <= 
        neg_reg_1535 when (tmp_4_reg_1709(0) = '1') else 
        ap_const_lv32_0;
    conv_sign_exten_fu_1100_p3 <= 
        neg_reg_1535 when (tmp_1_reg_1699(0) = '1') else 
        ap_const_lv32_0;
    conv_sum_bias_1_fu_1339_p2 <= std_logic_vector(unsigned(or_ln192_1_fu_1334_p2) + unsigned(sext_ln192_3_fu_1330_p1));
    conv_sum_bias_fu_1231_p2 <= std_logic_vector(unsigned(or_ln192_fu_1226_p2) + unsigned(sext_ln192_2_fu_1222_p1));
    conv_with_rnd_bit_1_fu_1182_p2 <= std_logic_vector(unsigned(or_ln181_1_fu_1170_p2) + unsigned(ap_const_lv32_1));
    conv_with_rnd_bit_fu_1130_p2 <= std_logic_vector(unsigned(or_ln181_fu_1118_p2) + unsigned(ap_const_lv32_1));

    data_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln101_fu_671_p2, data_in_TVALID_int_regslice)
    begin
        if (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TDATA_blk_n <= data_in_TVALID_int_regslice;
        else 
            data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_in_TREADY <= regslice_both_data_in_V_data_V_U_ack_in;

    data_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln101_fu_671_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            data_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_587_p1 <= contol(1 - 1 downto 0);
    event_done <= ap_done;
        frac_din_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frac_din),9));

    frac_dout_cast39_fu_605_p0 <= frac_dout;
        frac_dout_cast39_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frac_dout_cast39_fu_605_p0),9));

    frac_dout_cast_fu_608_p0 <= frac_dout;
        frac_dout_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frac_dout_cast_fu_608_p0),10));

    frac_w_cast38_fu_596_p0 <= frac_w;
        frac_w_cast38_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frac_w_cast38_fu_596_p0),9));

    frac_w_cast_fu_599_p0 <= frac_w;
        frac_w_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(frac_w_cast_fu_599_p0),10));


    grp_fu_1429_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1429_ce <= ap_const_logic_1;
        else 
            grp_fu_1429_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1438_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1438_ce <= ap_const_logic_1;
        else 
            grp_fu_1438_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1447_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1447_ce <= ap_const_logic_1;
        else 
            grp_fu_1447_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1456_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1456_ce <= ap_const_logic_1;
        else 
            grp_fu_1456_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln101_fu_671_p2 <= "1" when (k_reg_271 = mul_reg_1519) else "0";
    icmp_ln104_fu_679_p2 <= "1" when (conv_inner_cnt_fu_168 = ap_const_lv32_0) else "0";
    icmp_ln163_fu_904_p2 <= "1" when (conv_inner_cnt_fu_168 = sub113_reg_1524) else "0";
    icmp_ln184_1_fu_1312_p2 <= "1" when (signed(tmp_5_reg_1739) > signed(ap_const_lv24_0)) else "0";
    icmp_ln184_fu_1204_p2 <= "1" when (signed(tmp_2_reg_1724) > signed(ap_const_lv24_0)) else "0";
    icmp_ln186_1_fu_1317_p2 <= "1" when (signed(conv_with_rnd_bit_1_reg_1729) < signed(ap_const_lv32_FFFFFF00)) else "0";
    icmp_ln186_fu_1209_p2 <= "1" when (signed(conv_with_rnd_bit_reg_1714) < signed(ap_const_lv32_FFFFFF00)) else "0";
    k_1_fu_665_p2 <= std_logic_vector(unsigned(k_reg_271) + unsigned(ap_const_lv32_1));
    mac_data_lane_2_fu_752_p4 <= data_in_TDATA_int_regslice(23 downto 16);
    mac_data_lane_3_fu_772_p4 <= data_in_TDATA_int_regslice(31 downto 24);
    mac_data_lane_6_fu_832_p4 <= data_in_TDATA_int_regslice(55 downto 48);
    mac_data_lane_7_fu_852_p4 <= data_in_TDATA_int_regslice(63 downto 56);
    mac_data_lane_fu_724_p1 <= data_in_TDATA_int_regslice(8 - 1 downto 0);
    mac_weight_lane_2_fu_762_p4 <= weight_in_TDATA_int_regslice(23 downto 16);
    mac_weight_lane_3_fu_782_p4 <= weight_in_TDATA_int_regslice(31 downto 24);
    mac_weight_lane_6_fu_842_p4 <= weight_in_TDATA_int_regslice(55 downto 48);
    mac_weight_lane_7_fu_862_p4 <= weight_in_TDATA_int_regslice(63 downto 56);
    mac_weight_lane_fu_728_p1 <= weight_in_TDATA_int_regslice(8 - 1 downto 0);
    neg_fu_643_p2 <= (shr_fu_637_p2 xor ap_const_lv32_FFFFFFFF);
    or_ln181_1_fu_1170_p2 <= (conv_sign_exten_1_fu_1152_p3 or ashr_ln181_1_fu_1158_p2);
    or_ln181_2_fu_1124_p2 <= (trunc_ln181_fu_1110_p1 or trunc_ln181_1_fu_1114_p1);
    or_ln181_3_fu_1176_p2 <= (trunc_ln181_3_fu_1166_p1 or trunc_ln181_2_fu_1162_p1);
    or_ln181_fu_1118_p2 <= (conv_sign_exten_fu_1100_p3 or ashr_ln181_fu_1106_p2);
    or_ln186_1_fu_1375_p2 <= (icmp_ln184_1_fu_1312_p2 or and_ln186_1_fu_1361_p2);
    or_ln186_fu_1267_p2 <= (icmp_ln184_fu_1204_p2 or and_ln186_fu_1253_p2);
    or_ln192_1_fu_1334_p2 <= (ap_const_lv9_1 or add_ln94_1_reg_1734);
    or_ln192_fu_1226_p2 <= (ap_const_lv9_1 or add_ln94_reg_1719);
    phitmp2_fu_1237_p4 <= conv_sum_bias_fu_1231_p2(8 downto 1);
    phitmp3_fu_1345_p4 <= conv_sum_bias_1_fu_1339_p2(8 downto 1);
    select_ln186_2_fu_1367_p3 <= 
        ap_const_lv8_80 when (and_ln186_1_fu_1361_p2(0) = '1') else 
        ap_const_lv8_7F;
    select_ln186_fu_1259_p3 <= 
        ap_const_lv8_80 when (and_ln186_fu_1253_p2(0) = '1') else 
        ap_const_lv8_7F;
        sext_ln101_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub175_fu_655_p2),32));

    sext_ln101cast34_fu_1322_p1 <= sext_ln101_reg_1541(8 - 1 downto 0);
    sext_ln101cast_fu_1214_p1 <= sext_ln101_reg_1541(8 - 1 downto 0);
        sext_ln144_1_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1429_p3),32));

        sext_ln144_2_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1438_p3),32));

        sext_ln144_4_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1447_p3),32));

        sext_ln144_5_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1456_p3),32));

        sext_ln192_2_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ashr_ln192_fu_1217_p2),9));

        sext_ln192_3_fu_1330_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ashr_ln192_1_fu_1325_p2),9));

    shr_fu_637_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & sub151_cast_fu_633_p1(31-1 downto 0)))));

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    sub113_fu_591_p0 <= conv_loop_cnt;
    sub113_fu_591_p2 <= std_logic_vector(signed(sub113_fu_591_p0) + signed(ap_const_lv32_FFFFFFFF));
    sub150_fu_621_p2 <= std_logic_vector(signed(tmp_cast_fu_617_p1) + signed(frac_w_cast_fu_599_p1));
        sub151_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub151_fu_627_p2),32));

    sub151_fu_627_p2 <= std_logic_vector(unsigned(sub150_fu_621_p2) - unsigned(frac_dout_cast_fu_608_p1));
    sub174_fu_649_p2 <= std_logic_vector(signed(frac_w_cast38_fu_596_p1) - signed(frac_dout_cast39_fu_605_p1));
    sub175_fu_655_p2 <= std_logic_vector(unsigned(sub174_fu_649_p2) + unsigned(ap_const_lv9_1FF));
    tmp_3_fu_1285_p3 <= conv_final_fu_1273_p3(7 downto 7);
    tmp_6_fu_1393_p3 <= conv_final_1_fu_1381_p3(7 downto 7);
        tmp_cast_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_611_p2),10));

    tmp_fu_611_p2 <= std_logic_vector(signed(frac_din_cast_fu_602_p1) + signed(ap_const_lv9_1FF));
    trunc_ln181_1_fu_1114_p1 <= conv_sign_exten_fu_1100_p3(9 - 1 downto 0);
    trunc_ln181_2_fu_1162_p1 <= ashr_ln181_1_fu_1158_p2(9 - 1 downto 0);
    trunc_ln181_3_fu_1166_p1 <= conv_sign_exten_1_fu_1152_p3(9 - 1 downto 0);
    trunc_ln181_fu_1110_p1 <= ashr_ln181_fu_1106_p2(9 - 1 downto 0);
    trunc_ln96_1_fu_1389_p1 <= conv_final_1_fu_1381_p3(7 - 1 downto 0);
    trunc_ln96_fu_1281_p1 <= conv_final_fu_1273_p3(7 - 1 downto 0);

    weight_in_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln101_fu_671_p2, weight_in_TVALID_int_regslice)
    begin
        if (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_in_TDATA_blk_n <= weight_in_TVALID_int_regslice;
        else 
            weight_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    weight_in_TREADY <= regslice_both_weight_in_V_data_V_U_ack_in;

    weight_in_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln101_fu_671_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln101_fu_671_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            weight_in_TREADY_int_regslice <= ap_const_logic_1;
        else 
            weight_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln184_1_fu_1355_p2 <= (icmp_ln184_1_fu_1312_p2 xor ap_const_lv1_1);
    xor_ln184_fu_1247_p2 <= (icmp_ln184_fu_1204_p2 xor ap_const_lv1_1);
    zext_ln82_1_fu_1409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_ch_in_lane_2_fu_1401_p3),8));
    zext_ln82_fu_1301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_ch_in_lane_fu_1293_p3),8));
end behav;
